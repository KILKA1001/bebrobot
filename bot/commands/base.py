import os
import discord
from discord.ext import commands
from aiohttp import TraceConfig
from typing import Optional
from datetime import datetime, timezone
import pytz
import asyncio
import traceback

from bot.data import db
from bot.utils.history_manager import format_history_embed
from bot.utils.roles_and_activities import ACTIVITY_CATEGORIES, ROLE_THRESHOLDS, display_last_edit_date
from collections import defaultdict
from bot.systems import (
    render_history,
    log_action_cancellation,
    tophistory
)
from bot.systems.core_logic import (
    update_roles,
    run_monthly_top,
    get_help_embed,
    HelpView,
    LeaderboardView,
    transfer_data_logic,
    build_balance_embed
)
from bot.utils import send_temp
from bot import COMMAND_PREFIX


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TIME_FORMAT = "%H:%M (%d.%m.%Y)"
DATE_FORMAT = "%d-%m-%Y"        # 25-12-2023
DATETIME_FORMAT = "%Y-%m-%d %H:%M:%S"  # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

active_timers = {}

intents = discord.Intents.default()
intents.members = True
intents.message_content = True

trace_config = TraceConfig()
from bot.utils.api_monitor import monitor

@trace_config.on_request_end.append
async def _trace_request_end(session, ctx, params):
    monitor.record_request(params.response.status)

bot = commands.Bot(
    command_prefix=COMMAND_PREFIX,
    intents=intents,
    help_command=None,
    http_trace=trace_config,
)

def format_moscow_time(dt: Optional[datetime] = None) -> str:
    if dt is None:
        dt = datetime.now(timezone.utc)
    return dt.astimezone(pytz.timezone('Europe/Moscow')).strftime(TIME_FORMAT)

@bot.hybrid_command(
    name='addpoints',
    description='–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã —É—á–∞—Å—Ç–Ω–∏–∫—É'
)
@commands.has_permissions(administrator=True)
async def add_points(ctx, member: discord.Member, points: str, *, reason: str = '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'):
    try:
        points_float = float(points.replace(',', '.'))
        user_id = member.id
        current = db.scores.get(user_id, 0)
        db.scores[user_id] = max(current + points_float, 0)
        db.add_action(user_id, points_float, reason, ctx.author.id)
        await update_roles(member)
        embed = discord.Embed(title="üéâ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!", color=discord.Color.green())
        embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", value=member.mention, inline=False)
        embed.add_field(name="‚ûï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", value=f"**{points}** –±–∞–ª–ª–æ–≤", inline=False)
        embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞:", value=reason, inline=False)
        embed.add_field(name="üïí –í—Ä–µ–º—è:", value=format_moscow_time(), inline=False)
        embed.add_field(name="üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:", value=f"{db.scores[user_id]} –±–∞–ª–ª–æ–≤", inline=False)
        await send_temp(ctx, embed=embed, delete_after=None)
    except ValueError:
        await send_temp(ctx, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@bot.hybrid_command(
    name='removepoints',
    description='–°–Ω—è—Ç—å –±–∞–ª–ª—ã —É —É—á–∞—Å—Ç–Ω–∏–∫–∞'
)
@commands.has_permissions(administrator=True)
async def remove_points(ctx, member: discord.Member, points: str, *, reason: str = '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'):
    try:
        points_float = float(points.replace(',', '.'))
        if points_float <= 0:
            await send_temp(ctx, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 –¥–ª—è —Å–Ω—è—Ç–∏—è –±–∞–ª–ª–æ–≤.")
            return
        user_id = member.id
        current_points = db.scores.get(user_id, 0)
        if points_float > current_points:
            embed = discord.Embed(title="‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤", description=f"–£ {member.mention} —Ç–æ–ª—å–∫–æ {current_points} –±–∞–ª–ª–æ–≤", color=discord.Color.red())
            await send_temp(ctx, embed=embed)
            return
        db.scores[user_id] = current_points - points_float
        db.add_action(user_id, -points_float, reason, ctx.author.id)
        await update_roles(member)
        embed = discord.Embed(title="‚ö†Ô∏è –ë–∞–ª–ª—ã —Å–Ω—è—Ç—ã!", color=discord.Color.red())
        embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", value=member.mention, inline=False)
        embed.add_field(name="‚ûñ –°–Ω—è—Ç–æ –±–∞–ª–ª–æ–≤:", value=f"**{points_float}**", inline=False)
        embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞:", value=reason, inline=False)
        embed.add_field(name="üïí –í—Ä–µ–º—è:", value=format_moscow_time(), inline=False)
        embed.add_field(name="üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:", value=f"{db.scores[user_id]} –±–∞–ª–ª–æ–≤", inline=False)
        await send_temp(ctx, embed=embed)
    except ValueError:
        await send_temp(ctx, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")

@bot.hybrid_command(
    name='leaderboard',
    description='–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–ª–∞–º'
)
async def leaderboard(ctx):
    view = LeaderboardView(ctx)
    await send_temp(ctx, embed=view.get_embed(), view=view)

@bot.hybrid_command(
    name='history',
    description='–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
)
async def history_cmd(ctx, member: Optional[discord.Member] = None, page: int = 1):
    if member is None:
        member = ctx.author
    if member:
        await render_history(ctx, member, page)
    else:
        await send_temp(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.hybrid_command(
    name='roles',
    description='–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –±–∞–ª–ª–∞—Ö'
)
async def roles_list(ctx):
    desc = ""
    for role_id, points_needed in sorted(ROLE_THRESHOLDS.items(), key=lambda x: x[1], reverse=True):
        role = ctx.guild.get_role(role_id)
        if role:
            desc += f"**{role.name}**: {points_needed} –±–∞–ª–ª–æ–≤\n"
    embed = discord.Embed(title="–†–æ–ª–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–ª–ª–æ–≤", description=desc, color=discord.Color.purple())
    await send_temp(ctx, embed=embed)

@bot.hybrid_command(
    name='activities',
    description='–í–∏–¥—ã –ø–æ–º–æ—â–∏ –∫–ª—É–±—É –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å'
)
async def activities_cmd(ctx):
    embed = discord.Embed(
        title="üìã –í–∏–¥—ã –ø–æ–º–æ—â–∏ –∫–ª—É–±—É",
        description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –±–∞–ª–ª–∞—Ö:",
        color=discord.Color.blue()
    )
    def get_points_word(points):
        if points % 10 == 1 and points % 100 != 11:
            return "–±–∞–ª–ª"
        elif 2 <= points % 10 <= 4 and (points % 100 < 10 or points % 100 >= 20):
            return "–±–∞–ª–ª–∞"
        else:
            return "–±–∞–ª–ª–æ–≤"

    for category_name, activities in ACTIVITY_CATEGORIES.items():
        category_text = ""
        for activity_name, info in activities.items():
            category_text += f"**{activity_name}** ({info['points']} {get_points_word(info['points'])})\n"
            category_text += f"‚Ü≥ {info['description']}\n"
            if 'conditions' in info:
                category_text += "–£—Å–ª–æ–≤–∏—è:\n"
                for condition in info['conditions']:
                    category_text += f"‚Ä¢ {condition}\n"
            category_text += "\n"
        embed.add_field(name=category_name, value=category_text, inline=False)
    embed.set_footer(text=display_last_edit_date())
    await send_temp(ctx, embed=embed)


@bot.hybrid_command(
    name='undo',
    description='–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏—è'
)
@commands.has_permissions(administrator=True)
async def undo(ctx, member: discord.Member, count: int = 1):
    user_id = member.id
    user_history = db.history.get(user_id, [])
    if len(user_history) < count:
        await send_temp(ctx, f"‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å **{count}** –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {member.display_name}, —Ç–∞–∫ –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ **{len(user_history)}** –∑–∞–ø–∏—Å–µ–π.")
        return

    undo_entries = []
    for _ in range(count):
        entry = user_history.pop()
        points_val = entry.get("points", 0)
        reason = entry.get("reason", "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã")
        undo_entries.append((points_val, reason))

        # –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω—ã –≤ –±–∞–∑—É
        db.add_action(
            user_id=user_id,
            points=-points_val,
            reason=f"–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è: {reason}",
            author_id=ctx.author.id,
            is_undo=True
        )

    if not user_history:
        del db.history[user_id]

    await update_roles(member)

    embed = discord.Embed(
        title=f"‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ {count} –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {member.display_name}",
        color=discord.Color.orange()
    )
    for i, (points_val, reason) in enumerate(undo_entries[::-1], start=1):
        sign = "+" if points_val > 0 else ""
        embed.add_field(name=f"{i}. {sign}{points_val} –±–∞–ª–ª–æ–≤", value=reason, inline=False)
    await send_temp(ctx, embed=embed)
    await log_action_cancellation(ctx, member, undo_entries)

@bot.hybrid_command(
    name='monthlytop',
    description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ–ø–∞ –º–µ—Å—è—Ü–∞'
)
@commands.has_permissions(administrator=True)
async def monthly_top(ctx):
    await run_monthly_top(ctx)

@bot.hybrid_command(
    name='tophistory',
    description='–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π —Ç–æ–ø–æ–≤ –º–µ—Å—è—Ü–∞'
)
async def tophistory_cmd(ctx, month: Optional[int] = None, year: Optional[int] = None):
    await tophistory(ctx, month, year)

@bot.hybrid_command(
    name='helpy',
    description='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'
)
async def helpy_cmd(ctx):
    view = HelpView(ctx.author)
    embed = get_help_embed("points")
    await send_temp(ctx, embed=embed, view=view)

@bot.hybrid_command(description='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞')
async def ping(ctx):
    await send_temp(ctx, 'pong')
    
@bot.hybrid_command(
    name="bank",
    description='–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–ª—É–±–∞'
)
async def bank_balance(ctx):
    total = db.get_bank_balance()
    await send_temp(ctx, f"üè¶ –ë–∞–ª–∞–Ω—Å –±–∞–Ω–∫–∞: **{total:.2f} –±–∞–ª–ª–æ–≤**")

@bot.hybrid_command(
    name="bankadd",
    description='–î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã –≤ –∫–ª—É–±–Ω—ã–π –±–∞–Ω–∫'
)
@commands.has_permissions(administrator=True)
async def bank_add(ctx, amount: float, *, reason: str = "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"):
    if amount <= 0:
        await send_temp(ctx, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    db.add_to_bank(amount)
    db.log_bank_income(ctx.author.id, amount, reason)
    await send_temp(ctx, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ **{amount:.2f} –±–∞–ª–ª–æ–≤** –≤ –±–∞–Ω–∫. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

@bot.hybrid_command(
    name="bankspend",
    description='–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã –∏–∑ –±–∞–Ω–∫–∞'
)
@commands.has_permissions(administrator=True)
async def bank_spend(ctx, amount: float, *, reason: str = "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"):
    if amount <= 0:
        await send_temp(ctx, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    success = db.spend_from_bank(amount, ctx.author.id, reason)
    if success:
        await send_temp(ctx, f"üí∏ –ò–∑ –±–∞–Ω–∫–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ **{amount:.2f} –±–∞–ª–ª–æ–≤**. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    else:
        await send_temp(ctx, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")

@bot.hybrid_command(
    name="bankhistory",
    description='–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∫–ª—É–±–∞'
)
@commands.has_permissions(administrator=True)
async def bank_history(ctx):
    if not db.supabase:
        await send_temp(ctx, "‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return

    try:
        result = db.supabase.table("bank_history").select("*").order("timestamp", desc=True).limit(10).execute()
        if not result.data:
            await send_temp(ctx, "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return
        embed = discord.Embed(title="üìö –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –±–∞–Ω–∫–∞", color=discord.Color.teal())
        for entry in result.data:
            user = ctx.guild.get_member(entry["user_id"])
            name = user.display_name if user else f"<@{entry['user_id']}>"
            amt = entry["amount"]
            ts = entry["timestamp"][:19].replace("T", " ")
            embed.add_field(
                name=f"{'‚ûï' if amt > 0 else '‚ûñ'} {amt:.2f} –±–∞–ª–ª–æ–≤ ‚Ä¢ {ts}",
                value=f"üë§ {name}\nüìù {entry['reason']}",
                inline=False
            )
        await send_temp(ctx, embed=embed)
    except Exception as e:
        await send_temp(ctx, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

@bot.hybrid_command(
    name="balance",
    description='–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
)
async def balance(ctx, member: discord.Member = None):
    member = member or ctx.author
    embed = build_balance_embed(member)
    await send_temp(ctx, embed=embed)

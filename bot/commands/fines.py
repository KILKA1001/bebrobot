import discord
from discord.ext import commands
from datetime import datetime, timedelta, timezone
from typing import Optional

from bot.commands.base import bot
from bot.utils import send_temp, build_top_embed, safe_send, format_moscow_date

from bot.data import db
from bot.systems.fines_logic import (
    build_fine_embed,
    build_fine_detail_embed,
    FineView,
    AllFinesView,
    get_fine_leaders,
)

ALLOWED_ROLES = (
    []
)  # üëâ —Å—é–¥–∞ –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å ID —Ä–æ–ª–µ–π, –∫–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å —à—Ç—Ä–∞—Ñ—ã


def has_permission(ctx):
    if ctx.author.guild_permissions.administrator:
        return True
    return any(role.id in ALLOWED_ROLES for role in ctx.author.roles)


@bot.hybrid_command(name="fine", description="–ù–∞–∑–Ω–∞—á–∏—Ç—å —à—Ç—Ä–∞—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def fine(
    ctx,
    member: discord.Member,
    amount: str,
    fine_type: int,
    *,
    reason: str = "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã",
):
    if not has_permission(ctx):
        await send_temp(ctx, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–æ–≤.")
        return

    try:
        amount_value = float(amount.replace(",", "."))
        if amount_value <= 0:
            raise ValueError

        if fine_type not in (1, 2):
            await send_temp(
                ctx, "‚ùå –¢–∏–ø —à—Ç—Ä–∞—Ñ–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 (–æ–±—ã—á–Ω—ã–π) –∏–ª–∏ 2 (—É—Å–∏–ª–µ–Ω–Ω—ã–π)."
            )
            return

        due_date = datetime.now(timezone.utc) + timedelta(
            days=14 if fine_type == 1 else 30
        )

        fine = db.add_fine(
            user_id=member.id,
            author_id=ctx.author.id,
            amount=amount_value,
            fine_type=fine_type,
            reason=reason,
            due_date=due_date,
        )

        if fine:
            embed = discord.Embed(
                title="üìå –ù–∞–∑–Ω–∞—á–µ–Ω —à—Ç—Ä–∞—Ñ",
                description=(
                    f"{member.mention}, –≤–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —à—Ç—Ä–∞—Ñ.\n\n"
                    "‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ, "
                    "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/myfines`"
                ),
                color=discord.Color.red(),
            )
            embed.add_field(
                name="–°—É–º–º–∞", value=f"{amount_value:.2f} –±–∞–ª–ª–æ–≤", inline=True
            )
            embed.add_field(
                name="–¢–∏–ø",
                value=(
                    "–û–±—ã—á–Ω—ã–π (14 –¥–Ω–µ–π)"
                    if fine_type == 1
                    else "–£—Å–∏–ª–µ–Ω–Ω—ã–π (30 –¥–Ω–µ–π)"
                ),
                inline=True,
            )
            embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
            embed.add_field(
                name="–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã",
                value=format_moscow_date(due_date),
                inline=True,
            )
            embed.set_footer(text=f"ID —à—Ç—Ä–∞—Ñ–∞: {fine['id']}")

            await send_temp(ctx, embed=embed, delete_after=None)
            try:
                await safe_send(member, embed=embed)
            except discord.Forbidden:
                await send_temp(
                    ctx,
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–° {member.mention}",
                )

        else:
            await send_temp(ctx, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ.")

    except ValueError:
        await send_temp(ctx, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")


@bot.hybrid_command(
    name="myfines", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–≤–æ–∏ —à—Ç—Ä–∞—Ñ—ã"
)
async def myfines(ctx):
    user_id = ctx.author.id
    fines = db.get_user_fines(user_id)

    if not fines:
        await send_temp(ctx, "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤!")
        return

    for fine in fines:
        embed = build_fine_embed(fine)
        view = FineView(fine)
        await send_temp(ctx, embed=embed, view=view)


@bot.hybrid_command(
    name="allfines", description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤"
)
@commands.has_permissions(administrator=True)
async def all_fines(ctx):
    fines = [
        f
        for f in db.fines
        if not f.get("is_paid") and not f.get("is_canceled")
    ]

    if not fines:
        await send_temp(ctx, "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤.")
        return

    view = AllFinesView(fines, ctx)
    await send_temp(ctx, embed=view.get_page_embed(), view=view)


@bot.hybrid_command(name="finedetails", description="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —à—Ç—Ä–∞—Ñ–∞ –ø–æ ID")
async def finedetails(ctx, fine_id: int):
    fine = db.get_fine_by_id(fine_id)
    if not fine:
        await send_temp(ctx, "‚ùå –®—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    is_admin = ctx.author.guild_permissions.administrator
    if fine["user_id"] != ctx.author.id and not is_admin:
        await send_temp(ctx, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —á—É–∂–∏–µ —à—Ç—Ä–∞—Ñ—ã.")
        return

    embed = build_fine_detail_embed(fine)
    await send_temp(ctx, embed=embed)


@bot.hybrid_command(name="editfine", description="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à—Ç—Ä–∞—Ñ–∞")
@commands.has_permissions(administrator=True)
async def editfine(
    ctx,
    fine_id: int,
    amount: float,
    fine_type: int,
    due_date_str: str,
    *,
    reason: str,
):
    fine = db.get_fine_by_id(fine_id)
    if not fine:
        await send_temp(ctx, "‚ùå –®—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì
        due_date = datetime.strptime(due_date_str, "%d.%m.%Y").replace(
            tzinfo=timezone.utc
        )
    except ValueError:
        await send_temp(
            ctx, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
        )
        return

    fine["amount"] = amount
    fine["type"] = fine_type
    fine["reason"] = reason
    fine["due_date"] = due_date.isoformat()

    if not db.supabase:
        await send_temp(ctx, "‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return

    db.supabase.table("fines").update(
        {
            "amount": amount,
            "type": fine_type,
            "reason": reason,
            "due_date": due_date.isoformat(),
        }
    ).eq("id", fine_id).execute()

    await send_temp(ctx, f"‚úèÔ∏è –®—Ç—Ä–∞—Ñ #{fine_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")


@bot.hybrid_command(name="cancel_fine", description="–û—Ç–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∞—Ñ –ø–æ ID")
@commands.has_permissions(administrator=True)
async def cancel_fine(ctx, fine_id: int):
    fine = db.get_fine_by_id(fine_id)
    if not fine:
        await send_temp(ctx, "‚ùå –®—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if fine.get("is_canceled"):
        await send_temp(ctx, "‚ö†Ô∏è –≠—Ç–æ—Ç —à—Ç—Ä–∞—Ñ —É–∂–µ –æ—Ç–º–µ–Ω—ë–Ω.")
        return

    fine["is_canceled"] = True

    if not db.supabase:
        await send_temp(ctx, "‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return

    db.supabase.table("fines").update({"is_canceled": True}).eq(
        "id", fine_id
    ).execute()

    db.add_action(
        user_id=fine["user_id"],
        points=0,
        reason=f"–û—Ç–º–µ–Ω–∞ —à—Ç—Ä–∞—Ñ–∞ ID #{fine_id}",
        author_id=ctx.author.id,
    )

    await send_temp(ctx, f"‚ùå –®—Ç—Ä–∞—Ñ #{fine_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω.")


@bot.hybrid_command(
    name="finehistory", description="–ò—Å—Ç–æ—Ä–∏—è —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
)
async def finehistory(
    ctx, member: Optional[discord.Member] = None, page: int = 1
):
    member = member or ctx.author
    if not member:
        await send_temp(ctx, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if (
        member.id != ctx.author.id
        and not ctx.author.guild_permissions.administrator
    ):
        await send_temp(
            ctx, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —á—É–∂—É—é –∏—Å—Ç–æ—Ä–∏—é —à—Ç—Ä–∞—Ñ–æ–≤."
        )
        return

    fines = [f for f in db.fines if f["user_id"] == member.id]
    if not fines:
        await send_temp(ctx, "üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —à—Ç—Ä–∞—Ñ–æ–≤.")
        return

    fines_per_page = 5
    total_pages = max(1, (len(fines) + fines_per_page - 1) // fines_per_page)

    if page < 1 or page > total_pages:
        await send_temp(
            ctx, f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}"
        )
        return

    embed = discord.Embed(
        title=f"üìö –ò—Å—Ç–æ—Ä–∏—è —à—Ç—Ä–∞—Ñ–æ–≤ ‚Äî {member.display_name}",
        color=discord.Color.teal(),
    )
    start = (page - 1) * fines_per_page
    for fine in fines[start:start + fines_per_page]:
        status = "‚úÖ –û–ø–ª–∞—á–µ–Ω" if fine.get("is_paid") else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω"
        if fine.get("is_canceled"):
            status = "üö´ –û—Ç–º–µ–Ω—ë–Ω"
        if fine.get("is_overdue"):
            status += " + ‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω"
        due = fine.get("due_date", "")[:10]
        embed.add_field(
            name=f"#{fine['id']} ‚Ä¢ {fine['amount']} –±–∞–ª–ª–æ–≤ ({status})",
            value=f"üìÖ –î–æ: {due}\nüìù {fine['reason']}",
            inline=False,
        )

    embed.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}")
    await send_temp(ctx, embed=embed)


@bot.hybrid_command(
    name="topfines", description="–°–ø–∏—Å–æ–∫ —Ç–æ–ø-–¥–æ–ª–∂–Ω–∏–∫–æ–≤ –ø–æ —Å—É–º–º–µ —à—Ç—Ä–∞—Ñ–æ–≤"
)
async def topfines(ctx):
    top = get_fine_leaders()
    if not top:
        await send_temp(ctx, "üì≠ –ù–µ—Ç –¥–æ–ª–∂–Ω–∏–∫–æ–≤.")
        return

    formatted = []
    for uid, amount in top:
        member = ctx.guild.get_member(uid)
        name = member.display_name if member else f"<@{uid}>"
        formatted.append((name, f"üí∞ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {amount:.2f} –±–∞–ª–ª–æ–≤"))

    embed = build_top_embed(
        title="üìâ –¢–æ–ø –ø–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏",
        entries=formatted,
        color=discord.Color.red(),
    )
    await send_temp(ctx, embed=embed)

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã Discord
import discord

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import os
import asyncio
from dotenv import load_dotenv
import pytz

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from bot.data import db
from keep_alive import keep_alive
from bot.commands import bot as command_bot
from bot.commands import run_monthly_top
from datetime import datetime

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
COMMAND_PREFIX = '?'
TIME_FORMAT = "%H:%M (%d.%m.%Y)"
TOP_CHANNEL_ID = int(os.getenv("MONTHLY_TOP_CHANNEL_ID", 0))

# –¢–∞–π–º–µ—Ä—ã —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
active_timers = {}

bot = command_bot

async def send_greetings(channel, user_list):
    for user_id in user_list:
        await channel.send(f"–ü—Ä–∏–≤–µ—Ç, <@{user_id}>!")
        await asyncio.sleep(1)

async def autosave_task():
    await bot.wait_until_ready()
    while not bot.is_closed():
        db.save_all()
        print("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        await asyncio.sleep(300)

@bot.event
async def on_ready():
    print(f'üü¢ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    print(f'–°–µ—Ä–≤–µ—Ä–æ–≤: {len(bot.guilds)}')

    db.load_data()

    activity = discord.Activity(
        name=f"{COMMAND_PREFIX}help",
        type=discord.ActivityType.listening
    )
    await bot.change_presence(activity=activity)

    # üëá —Ç—É—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ
    asyncio.create_task(autosave_task())

    print('--- –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ---')
    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.scores)}')
    print(f'–ò—Å—Ç–æ—Ä–∏–π –¥–µ–π—Å—Ç–≤–∏–π: {sum(len(v) for v in db.history.values())}')

async def monthly_top_task():
    await bot.wait_until_ready()
    
    last_ran = None

    while not bot.is_closed():
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        if now.day == 1 and (last_ran is None or last_ran.month != now.month):
            try:
                # –ù–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª —Å –∏–º–µ–Ω–µ–º 'top-log'
                channel = bot.get_channel(TOP_CHANNEL_ID)
                if not isinstance(channel, discord.TextChannel):
                    print("‚ùå –ö–∞–Ω–∞–ª #top-log –Ω–µ —è–≤–ª—è–µ—Ç—Å—è TextChannel")
                    await asyncio.sleep(3600)
                    continue

                msg = await channel.send("üîÅ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–ø –º–µ—Å—è—Ü–∞...")
                ctx = await bot.get_context(msg)
                await run_monthly_top(ctx)

                last_ran = now
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Ç–æ–ø–∞ –º–µ—Å—è—Ü–∞: {e}")
        await asyncio.sleep(3600)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    load_dotenv()
    keep_alive()
    TOKEN = os.getenv('DISCORD_TOKEN')

    if not TOKEN:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DISCORD_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")
        return

    try:
        bot.run(TOKEN)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", e)
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

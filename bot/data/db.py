import os
import logging
import discord
from discord.ext import commands
from typing import Optional
from datetime import datetime, timezone, timedelta
from supabase import create_client
from postgrest.exceptions import APIError
from dotenv import load_dotenv
import traceback
import asyncio

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Database:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.init_db()
        return cls._instance

    def init_db(self):
        load_dotenv()
        self.bot = None
        self.bot: Optional[commands.Bot] = None
        self.url = os.getenv("SUPABASE_URL")
        self.key = os.getenv("SUPABASE_KEY")
        self.supabase = create_client(self.url, self.key) if self.url and self.key else None
        # Some Supabase deployments strictly check for lowercase 'apikey' header.
        # Ensure both variants are present in request headers.
        if self.supabase:
            self.supabase.options.headers.setdefault("apikey", self.key)
        self.has_was_on_time = True
        self._ensure_tables()
        self.load_data()
        self.load_fines()
        self.quick_pay_streak = {}
        self.guild_id = int(os.getenv("GUILD_ID", 0))
        self.fast_payer_role_id = int(os.getenv("FAST_PAYER_ROLE_ID", 0))
        
    def _ensure_tables(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        if not self.supabase:
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã scores
            self.supabase.table("scores").select("user_id").limit(1).execute()
        except Exception as e:
            raise RuntimeError(f"–¢–∞–±–ª–∏—Ü–∞ scores –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(e)}")
        try:
            self.supabase.table("fines").select("id").limit(1).execute()
            try:
                self.supabase.table("fines").select("was_on_time").limit(1).execute()
                self.has_was_on_time = True
            except Exception:
                self.has_was_on_time = False
                logger.warning("–°—Ç–æ–ª–±–µ—Ü 'was_on_time' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ fines")
        except Exception as e:
            raise RuntimeError(f"–¢–∞–±–ª–∏—Ü–∞ fines –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(e)}")

        try:
            self.supabase.table("fine_payments").select("id").limit(1).execute()
        except Exception as e:
            raise RuntimeError(f"–¢–∞–±–ª–∏—Ü–∞ fine_payments –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(e)}")

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π"""
        logger.info("‚öôÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Supabase...")
        try:
            if not self.supabase:
                raise ConnectionError("Supabase: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–ª—ã
            scores_response = self.supabase.from_('scores').select('*').execute()
            if hasattr(scores_response, 'data'):
                self.scores = {int(item['user_id']): float(item['points']) for item in scores_response.data}
            else:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Supabase –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–ª–æ–≤")

            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
            actions_response = self.supabase.from_('actions')\
                .select('*')\
                .order('timestamp', desc=True)\
                .execute()

            if hasattr(actions_response, 'data'):
                self.actions = actions_response.data
                self._build_history()
            else:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Supabase –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ–π—Å—Ç–≤–∏–π")

            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.scores)}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
            traceback.print_exc()
            self.scores = {}
            self.actions = []
            self.history = {}

    def _build_history(self):
        """–°—Ç—Ä–æ–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π"""
        self.history = {}
        for action in self.actions:
            user_id = int(action['user_id'])
            if user_id not in self.history:
                self.history[user_id] = []
            self.history[user_id].append({
                'points': float(action['points']),
                'reason': action['reason'],
                'author_id': int(action['author_id']),
                'timestamp': action['timestamp']
            })

    def update_scores(self, user_id: int, points_change: float):
        """–ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        if not self.supabase:
            return False

        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã
            try:
                current = self.supabase.table("scores")\
                    .select("points")\
                    .eq("user_id", user_id)\
                    .execute()
                current_points = float(current.data[0]['points']) if current.data else 0
            except Exception:
                current_points = 0

            new_points = max(current_points + points_change, 0)  # –ù–µ —É—Ö–æ–¥–∏–º –≤ –º–∏–Ω—É—Å

            # 2. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã —á–µ—Ä–µ–∑ upsert
            result = self.supabase.table("scores")\
                .upsert({
                    "user_id": user_id,
                    "points": new_points
                })\
                .execute()

            if result:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                self.scores[user_id] = new_points
                return True
        except Exception as e:
            logger.error(f"üî• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤: {str(e)}")
            traceback.print_exc()
            return False

    def add_action(self, user_id: int, points: float, reason: str, author_id: int, is_undo: bool = False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"""
        try:
            # 1. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã
            if not self.update_scores(user_id, points):
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã")

            # 2. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—è
            action = {
                "user_id": user_id,
                "points": points,
                "reason": reason,
                "author_id": author_id,
                "action_type": "remove" if points < 0 else "add"
            }
            # –î–æ–±–∞–≤–ª—è–µ–º is_undo —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ True
            if is_undo:
                action["is_undo"] = True
                
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if not self.supabase:
                logger.warning("Supabase client is not initialized.")
                return False
            response = self.supabase.table("actions")\
                .insert(action)\
                .execute()

            if not response.data:
                raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Supabase")

            # 4. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
            self.actions.insert(0, response.data[0])  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
            if user_id not in self.history:
                self.history[user_id] = []
            self.history[user_id].insert(0, {
                'points': points,
                'reason': reason,
                'author_id': author_id,
                'timestamp': response.data[0]['timestamp'],
                'is_undo': is_undo
            })

            logger.info(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (ID: {response.data[0]['id']})")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {str(e)}")
            traceback.print_exc()
            return False

    def _handle_response(self, response):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Supabase"""
        if not response:
            return None
        if hasattr(response, 'error') and response.error:
            raise Exception(f"Supabase error: {response.error}")
        return response

    def save_all(self):
        try:
            if not self.supabase:
                logger.warning("‚ö†Ô∏è Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
                
            if self.scores:
                scores_data = [{"user_id": k, "points": v} for k, v in self.scores.items()]
                response = self._handle_response(
                    self.supabase.table("scores").upsert(scores_data).execute()
                )
                if response:
                    logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(response.data if response.data else [])} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            logger.error(f"üî• –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            traceback.print_exc()

    def log_monthly_top(self, entries: list, month: int, year: int):
        """–ó–∞–ø–∏—Å—å —Ç–æ–ø–∞ –º–µ—Å—è—Ü–∞ –≤ Supabase"""
        if not self.supabase:
            logger.warning("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∞")
            return False

        log_entries = [
            {
                "user_id": uid,
                "month": month,
                "year": year,
                "place": i + 1,
                "bonus": round(points * percent, 2)
            }
            for i, (uid, points, percent) in enumerate(entries)
        ]

        try:
            self.supabase.table("monthly_top_log").insert(log_entries).execute()
            logger.info("‚úÖ –õ–æ–≥ —Ç–æ–ø–∞ –º–µ—Å—è—Ü–∞ –∑–∞–ø–∏—Å–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ç–æ–ø–∞ –º–µ—Å—è—Ü–∞: {e}")
            return False

#–®—Ç—Ä–∞—Ñ—ã
    def load_fines(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à—Ç—Ä–∞—Ñ—ã –∏ –æ–ø–ª–∞—Ç—ã –∏–∑ Supabase"""
        if not self.supabase:
            self.fines = []
            self.fine_payments = []
            return

        try:
            fines_resp = self.supabase.table("fines").select("*").execute()
            payments_resp = self.supabase.table("fine_payments").select("*").execute()

            self.fines = fines_resp.data if hasattr(fines_resp, "data") else []
            self.fine_payments = payments_resp.data if hasattr(payments_resp, "data") else []

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —à—Ç—Ä–∞—Ñ–æ–≤: {len(self.fines)}, –æ–ø–ª–∞—Ç: {len(self.fine_payments)}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à—Ç—Ä–∞—Ñ–æ–≤: {str(e)}")
            traceback.print_exc()
            self.fines = []
            self.fine_payments = []

    def add_fine(self, user_id: int, author_id: int, amount: float, fine_type: int, reason: str, due_date: datetime):
        """–°–æ–∑–¥–∞—ë—Ç —à—Ç—Ä–∞—Ñ"""
        if not self.supabase:
            logger.warning("‚ö†Ô∏è Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None

        try:
            result = self.supabase.table("fines").insert({
                "user_id": user_id,
                "author_id": author_id,
                "amount": amount,
                "type": fine_type,
                "reason": reason,
                "due_date": due_date.isoformat()
            }).execute()

            if not result.data:
                raise ValueError("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Supabase –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–∞")

            fine = result.data[0]
            self.fines.insert(0, fine)
            return fine

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞: {str(e)}")
            traceback.print_exc()
            return None

    def get_user_fines(self, user_id: int, active_only: bool = True):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return [
            fine for fine in self.fines
            if fine["user_id"] == user_id
            and (not active_only or (not fine["is_paid"] and not fine["is_canceled"]))
        ]

    def get_fine_by_id(self, fine_id: int):
        for fine in self.fines:
            if fine["id"] == fine_id:
                return fine
        return None

    def get_bank_balance(self):
        try:
            if not self.supabase:
                return 0.0
            response = self.supabase.table("bank").select("total").limit(1).execute()
            if response.data and len(response.data) > 0:
                return float(response.data[0]["total"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–∞–Ω–∫–∞: {str(e)}")
        return 0.0

    def add_to_bank(self, amount: float):
        try:
            if not self.supabase:
                logger.warning("‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            current = self.get_bank_balance()
            new_total = current + amount
            self.supabase.table("bank").upsert({
                "id": 1,
                "total": new_total,
                "updated_at": datetime.now(timezone.utc).isoformat()
            }).execute()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞: {str(e)}")
            return False

    def record_payment(self, user_id: int, fine_id: int, amount: float, author_id: int) -> bool:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É —à—Ç—Ä–∞—Ñ–∞, –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–Ω–∫, –±–∞–ª–ª—ã, —à—Ç—Ä–∞—Ñ"""
        try:
            if not self.supabase:
                logger.warning("‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False

            fine = self.get_fine_by_id(fine_id)
            is_test = False
            if fine:
                reason = str(fine.get("reason", ""))
                is_test = "test" in reason.lower()

            # 1. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not self.update_scores(user_id, -amount):
                return False

            # 2. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ fine_payments
            self.supabase.table("fine_payments").insert({
                "fine_id": fine_id,
                "user_id": user_id,
                "amount": amount,
                "author_id": author_id
            }).execute()

            # 3. –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è
            self.add_action(user_id, -amount, f"–û–ø–ª–∞—Ç–∞ —à—Ç—Ä–∞—Ñ–∞ ID #{fine_id}", author_id)

            # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–∞–Ω–∫–∞ (–µ—Å–ª–∏ —à—Ç—Ä–∞—Ñ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π)
            if not is_test:
                self.add_to_bank(amount)
                self.log_bank_income(user_id, amount, f"–û–ø–ª–∞—Ç–∞ —à—Ç—Ä–∞—Ñ–∞ ID #{fine_id}")

            # 5. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —à—Ç—Ä–∞—Ñ—É
            if fine:
                fine['paid_amount'] = round(fine.get('paid_amount', 0) + amount, 2)
                fine['is_paid'] = fine['paid_amount'] >= fine['amount']

                update_data = {
                    "paid_amount": fine['paid_amount'],
                    "is_paid": fine['is_paid']
                }

                if self.has_was_on_time and fine['is_paid'] and 'was_on_time' not in fine:
                    paid_now = datetime.now(timezone.utc)

                    due_raw = fine.get("due_date")
                    post_raw = fine.get("postponed_until")

                    try:
                        if isinstance(due_raw, str):
                            due_dt = datetime.fromisoformat(due_raw)
                            if paid_now <= due_dt:
                                update_data["was_on_time"] = True
                            elif isinstance(post_raw, str):
                                post_dt = datetime.fromisoformat(post_raw)
                                update_data["was_on_time"] = paid_now <= post_dt
                            else:
                                update_data["was_on_time"] = False
                        else:
                            update_data["was_on_time"] = False
                    except Exception:
                        update_data["was_on_time"] = False

                try:
                    self.supabase.table("fines").update(update_data).eq("id", fine_id).execute()
                except APIError as e:
                    if "was_on_time" in str(e) and getattr(e, "code", "") == "PGRST204":
                        self.has_was_on_time = False
                        update_data.pop("was_on_time", None)
                        self.supabase.table("fines").update(update_data).eq("id", fine_id).execute()
                    else:
                        raise

                # üéØ –ë—ã—Å—Ç—Ä–∞—è –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (—à—Ç—Ä–∞—Ñ ‚â• 3)
                created_raw = fine.get("created_at")
                now = datetime.now(timezone.utc)

                try:
                    if (
                        fine['is_paid']
                        and fine.get("was_on_time")
                        and fine['amount'] >= 3
                        and isinstance(created_raw, str)
                    ):
                        created_dt = datetime.fromisoformat(created_raw)
                        if (now - created_dt).days <= 5:
                            self._track_quick_payment(user_id)
                        else:
                            self.quick_pay_streak[user_id] = 0
                    else:
                        self.quick_pay_streak[user_id] = 0
                except Exception:
                    self.quick_pay_streak[user_id] = 0


            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–ø–ª–∞—Ç—ã: {e}")
            traceback.print_exc()
            return False

    def can_postpone(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç—Å—Ä–æ—á–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –¥–Ω–µ–π"""
        if user_id not in self.history:
            return True
        now = datetime.now(timezone.utc)
        for entry in reversed(self.history[user_id]):
            if entry.get("reason", "").startswith("–û—Ç—Å—Ä–æ—á–∫–∞ —à—Ç—Ä–∞—Ñ–∞"):
                try:
                    ts = entry.get("timestamp")
                    if isinstance(ts, str):
                        ts = datetime.fromisoformat(ts)
                    if (now - ts).days < 60:
                        return False
                except Exception:
                    continue
        return True

    def apply_postponement(self, fine_id: int, days: int = 7) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–Ω–∏ –∫ —Å—Ä–æ–∫—É —à—Ç—Ä–∞—Ñ–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ª–æ–≥–∏"""
        try:
            if not self.supabase:
                return False
            fine = self.get_fine_by_id(fine_id)
            if not fine:
                return False
            original_due = datetime.fromisoformat(fine["due_date"])
            new_due = original_due + timedelta(days=days)

            self.supabase.table("fines").update({
                "due_date": new_due.isoformat(),
                "postponed_until": datetime.now(timezone.utc).isoformat()
            }).eq("id", fine_id).execute()

            fine["due_date"] = new_due.isoformat()
            fine["postponed_until"] = datetime.now(timezone.utc).isoformat()

            self.add_action(
                user_id=fine["user_id"],
                points=0,
                reason=f"–û—Ç—Å—Ä–æ—á–∫–∞ —à—Ç—Ä–∞—Ñ–∞ ID #{fine_id} –Ω–∞ {days} –¥–Ω.",
                author_id=fine["author_id"]
            )
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—Ä–æ—á–∫–µ —à—Ç—Ä–∞—Ñ–∞: {e}")
            traceback.print_exc()
            return False

    def mark_overdue(self, fine: dict) -> bool:
        """–ü–æ–º–µ—á–∞–µ—Ç —à—Ç—Ä–∞—Ñ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∏ –ª–æ–≥–∏—Ä—É–µ—Ç"""
        try:
            if not self.supabase:
                return False
            self.supabase.table("fines").update({
                "is_overdue": True
            }).eq("id", fine["id"]).execute()

            fine["is_overdue"] = True

            self.add_action(
                user_id=fine["user_id"],
                points=0,
                reason=f"–ü—Ä–æ—Å—Ä–æ—á–∫–∞ —à—Ç—Ä–∞—Ñ–∞ ID #{fine['id']}",
                author_id=fine["author_id"]
            )
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ —à—Ç—Ä–∞—Ñ–∞: {e}")
            traceback.print_exc()
            return False

    def log_monthly_fine_top(self, entries: list):
        if not self.supabase:
            logger.warning("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —à—Ç—Ä–∞—Ñ–Ω–æ–≥–æ –ª–æ–≥–∞")
            return False

        now = datetime.now()
        month = now.month
        year = now.year

        logs = [
            {
                "user_id": uid,
                "month": month,
                "year": year,
                "place": i + 1,
                "penalty": round(total * percent, 2)
            }
            for i, ((uid, total), percent) in enumerate(entries)
        ]

        try:
            self.supabase.table("monthly_fine_hst").insert(logs).execute()
            logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —à—Ç—Ä–∞—Ñ–Ω–æ–≥–æ —Ç–æ–ø–∞ –∑–∞–ø–∏—Å–∞–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —à—Ç—Ä–∞—Ñ–Ω–æ–≥–æ —Ç–æ–ø–∞: {e}")
            return False

    def _track_quick_payment(self, user_id: int):
        self.quick_pay_streak[user_id] = self.quick_pay_streak.get(user_id, 0) + 1

        if self.quick_pay_streak[user_id] >= 10:
            logger.info(f"üèÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª 10 –±—ã—Å—Ç—Ä—ã—Ö –æ–ø–ª–∞—Ç –ø–æ–¥—Ä—è–¥")

            if self.bot:
                guild = self.bot.get_guild(self.guild_id)
                if guild:
                    member = guild.get_member(user_id)
                    role = guild.get_role(self.fast_payer_role_id)
                    if member and role and role not in member.roles:
                        asyncio.create_task(
                            member.add_roles(role, reason="–ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ 10 —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–¥—Ä—è–¥")
                        )
                        logger.info(f"üéñ –†–æ–ª—å –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            self.quick_pay_streak[user_id] = 0
        else:
            logger.info(f"‚è± –ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞: {self.quick_pay_streak[user_id]} –ø–æ–¥—Ä—è–¥")

    def spend_from_bank(self, amount: float, user_id: int, reason: str) -> bool:
        try:
            if not self.supabase:
                return False
            current = self.get_bank_balance()
            if current < amount:
                return False
            new_total = current - amount
            self.supabase.table("bank").upsert({
                "id": 1,
                "total": new_total,
                "updated_at": datetime.now(timezone.utc).isoformat()
            }).execute()

            self.supabase.table("bank_history").insert({
                "user_id": user_id,
                "amount": -amount,
                "reason": reason,
                "timestamp": datetime.now(timezone.utc).isoformat()
            }).execute()

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞—Ç–µ –∏–∑ –±–∞–Ω–∫–∞: {str(e)}")
            return False

    def log_bank_income(self, user_id: int, amount: float, reason: str) -> bool:
        try:
            if not self.supabase:
                return False
            self.supabase.table("bank_history").insert({
                "user_id": user_id,
                "amount": amount,
                "reason": reason,
                "timestamp": datetime.now(timezone.utc).isoformat()
            }).execute()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–Ω–∫: {e}")
            return False

    def update_tickets(self, user_id: int, ticket_type: str, amount: int) -> bool:
        """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    ticket_type: 'normal' | 'gold'
        """
        if ticket_type not in ("normal", "gold") or not self.supabase:
            return False

        field = f"tickets_{ticket_type}"
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            response = self.supabase.table("scores").select(field).eq("user_id", user_id).execute()
            current = int(response.data[0][field]) if response.data else 0
            new_value = max(current + amount, 0)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            self.supabase.table("scores").upsert({
                "user_id": user_id,
                field: new_value
            }).execute()

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤: {e}")
            return False

    def log_ticket_action(self, user_id: int, ticket_type: str, amount: int, reason: str, author_id: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ –≤ ticket_actions"""
        try:
            self.supabase.table("ticket_actions").insert({
            "user_id": user_id,
            "ticket_type": ticket_type,
            "amount": amount,
            "reason": reason,
            "author_id": author_id
            }).execute()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}")

    def give_ticket(self, user_id: int, ticket_type: str, amount: int, reason: str, author_id: int) -> bool:
        """
        –ù–∞—á–∏—Å–ª—è–µ—Ç –±–∏–ª–µ—Ç—ã –∏ –ª–æ–≥–∏—Ä—É–µ—Ç
        """
        if self.update_tickets(user_id, ticket_type, amount):
            self.log_ticket_action(user_id, ticket_type, amount, reason, author_id)
            return True
        return False

    def remove_ticket(self, user_id: int, ticket_type: str, amount: int, reason: str, author_id: int) -> bool:
        """
        –°–Ω–∏–º–∞–µ—Ç –±–∏–ª–µ—Ç—ã –∏ –ª–æ–≥–∏—Ä—É–µ—Ç
        """
        if self.update_tickets(user_id, ticket_type, -amount):
            self.log_ticket_action(user_id, ticket_type, -amount, reason, author_id)
            return True
        return False

    def transfer_user_data(self, old_id: int, new_id: int) -> bool:
        """
        –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–±–∞–ª–ª—ã, –±–∏–ª–µ—Ç—ã, –ª–æ–≥–∏) –æ—Ç old_id ‚Üí new_id.
        """
        try:
            # –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏ –≤ scores
            score = self.supabase.table("scores").select("*").eq("user_id", old_id).execute()
            if score.data:
                data = score.data[0]
                self.supabase.table("scores").upsert({
                    "user_id": new_id,
                    "points": data.get("points", 0),
                    "tickets_normal": data.get("tickets_normal", 0),
                    "tickets_gold": data.get("tickets_gold", 0)
                }).execute()
                self.supabase.table("scores").delete().eq("user_id", old_id).execute()

            # –ü–µ—Ä–µ–Ω–æ—Å –ª–æ–≥–æ–≤
            self.supabase.table("actions").update({"user_id": new_id}).eq("user_id", old_id).execute()
            self.supabase.table("ticket_actions").update({"user_id": new_id}).eq("user_id", old_id).execute()

            self.load_data()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
db = Database()
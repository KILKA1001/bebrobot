import discord
from discord import ui, Embed
from bot.utils import SafeView
from discord.ext import commands
from typing import Optional, List, Tuple
from functools import partial

from bot.data.players_db import (
    create_player,
    get_player_by_id,
    get_player_by_tg,
    list_players,
    update_player_field,
    delete_player,
    add_player_to_tournament,
    remove_player_from_tournament,
    list_player_logs,
)
from bot.data.tournament_db import (
    add_player_participant,
    get_announcement_message_id,
    get_tournament_size,
)
from bot.systems.tournament_logic import RegistrationView, ANNOUNCE_CHANNEL_ID
from bot.utils import send_temp

async def register_player(
    ctx: commands.Context,
    nick: str,
    tg_username: str
) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.
    """
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç TG-username
    if not tg_username.startswith("@"):
        await send_temp(ctx, "‚ùå Telegram-–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `@`.")
        return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–≥–æ TG –µ—â—ë –Ω–µ—Ç
    if get_player_by_tg(tg_username):
        await send_temp(ctx, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram-–Ω–∏–∫–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    pid = create_player(nick, tg_username)
    if pid is not None:
        await send_temp(ctx, f"‚úÖ –ò–≥—Ä–æ–∫ #{pid} –¥–æ–±–∞–≤–ª–µ–Ω: `{nick}`, {tg_username}")
    else:
        await send_temp(ctx, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞.")

async def register_player_by_id(
    ctx: commands.Context,
    player_id: int,
    tournament_id: int,
) -> None:
    """
    –°–≤—è–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç—É—Ä–Ω–∏—Ä–æ–º.
    """
    player = get_player_by_id(player_id)
    if not player:
        await send_temp(ctx, "‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É
    ok = add_player_to_tournament(player_id, tournament_id)
    ok_part = add_player_participant(tournament_id, player_id)

    if ok and ok_part:
        await send_temp(
            f"‚úÖ –ò–≥—Ä–æ–∫ #{player_id} (`{player['nick']}`) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ç—É—Ä–Ω–∏—Ä–µ #{tournament_id}."
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ
        msg_id = get_announcement_message_id(tournament_id)
        if msg_id and ctx.guild:
            channel = ctx.guild.get_channel(ANNOUNCE_CHANNEL_ID)
            if channel:
                try:
                    message = await channel.fetch_message(msg_id)
                    view = RegistrationView(tournament_id, get_tournament_size(tournament_id))
                    await message.edit(view=view)
                except Exception:
                    pass
    else:
        await send_temp(ctx, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ.")

async def list_players_view(
    ctx: commands.Context,
    page: int = 1
) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç Embed —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    –ö–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞ üìã, –∫–æ—Ç–æ—Ä–∞—è —à–ª—ë—Ç –µ–≥–æ tg_username –≤ –ª–∏—á–∫—É.
    """
    per_page = 5
    rows, pages = list_players(page, per_page)

    embed = Embed(
        title=f"üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{pages}",
        color=discord.Color.blue()
    )
    for p in rows:
        embed.add_field(
            name=f"#{p['id']} ‚Ä¢ {p['nick']}",
            value=p['tg_username'],
            inline=False
        )

    view = SafeView(timeout=120)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Telegram-–Ω–∏–∫–∞
    for p in rows:
        btn = ui.Button(
            label=f"üìã {p['id']}",
            style=discord.ButtonStyle.secondary,
            custom_id=f"copy_{p['id']}"
        )
        async def _copy(interaction: discord.Interaction, tg_username: str):
            await interaction.response.send_message(
                f"Telegram-–Ω–∏–∫ –∏–≥—Ä–æ–∫–∞: `{tg_username}`", ephemeral=True
            )
        btn.callback = partial(_copy, tg_username=p['tg_username'])
        view.add_item(btn)

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    prev_btn = ui.Button(label="‚óÄÔ∏è", style=discord.ButtonStyle.primary)
    next_btn = ui.Button(label="‚ñ∂Ô∏è", style=discord.ButtonStyle.primary)

    # –ö–æ–ª–±—ç–∫ ¬´–Ω–∞–∑–∞–¥¬ª
    async def go_prev(interaction: discord.Interaction):
        new_page = max(1, page - 1)
        new_rows, new_pages = list_players(new_page, per_page)
        new_embed = Embed(
            title=f"üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {new_page}/{new_pages}",
            color=discord.Color.blue()
        )
        for p2 in new_rows:
            new_embed.add_field(
                name=f"#{p2['id']} ‚Ä¢ {p2['nick']}",
                value=p2['tg_username'],
                inline=False
            )
        prev_btn.disabled = new_page <= 1
        next_btn.disabled = new_page >= new_pages
        await interaction.response.edit_message(embed=new_embed, view=view)

    # –ö–æ–ª–±—ç–∫ ¬´–≤–ø–µ—Ä–µ–¥¬ª
    async def go_next(interaction: discord.Interaction):
        new_page = min(pages, page + 1)
        new_rows, new_pages = list_players(new_page, per_page)
        new_embed = Embed(
            title=f"üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {new_page}/{new_pages}",
            color=discord.Color.blue()
        )
        for p2 in new_rows:
            new_embed.add_field(
                name=f"#{p2['id']} ‚Ä¢ {p2['nick']}",
                value=p2['tg_username'],
                inline=False
            )
        prev_btn.disabled = new_page <= 1
        next_btn.disabled = new_page >= new_pages
        await interaction.response.edit_message(embed=new_embed, view=view)

    prev_btn.callback = go_prev
    next_btn.callback = go_next
    view.add_item(prev_btn)
    view.add_item(next_btn)

    await send_temp(ctx, embed=embed, view=view)

async def edit_player(
    ctx: commands.Context,
    player_id: int,
    field: str,
    new_value: str
) -> None:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç nick –∏–ª–∏ tg_username –∏–≥—Ä–æ–∫–∞.
    """
    if field not in ("nick", "tg_username"):
        await send_temp(ctx, "‚ùå –ú–æ–∂–Ω–æ –ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ `nick` –∏–ª–∏ `tg_username`.")
        return

    if field == "tg_username" and not new_value.startswith("@"):
        await send_temp(ctx, "‚ùå Telegram-–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `@`.")
        return

    ok = update_player_field(player_id, field, new_value)
    if ok:
        await send_temp(ctx, f"‚úÖ –ò–≥—Ä–æ–∫ #{player_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {field} = `{new_value}`")
    else:
        await send_temp(ctx, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def delete_player_cmd(
    ctx: commands.Context,
    player_id: int
) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
    """
    ok = delete_player(player_id)
    if ok:
        await send_temp(ctx, f"‚úÖ –ò–≥—Ä–æ–∫ #{player_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    else:
        await send_temp(ctx, "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.")

async def unregister_player(
    ctx: commands.Context,
    player_id: int,
    tournament_id: int
) -> None:
    """
    –£–±–∏—Ä–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞.
    """
    ok = remove_player_from_tournament(player_id, tournament_id)
    if ok:
        await send_temp(ctx, f"‚úÖ –ò–≥—Ä–æ–∫ #{player_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ #{tournament_id}.")
    else:
        await send_temp(ctx, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—ë –Ω–µ—Ç).")

async def list_player_logs_view(
    ctx: commands.Context,
    player_id: int,
    page: int = 1
) -> None:
    """
    –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –ª–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
    """
    per_page = 5
    logs, pages = list_player_logs(player_id, page, per_page)
    if not logs:
        await send_temp(ctx, f"üì≠ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ #{player_id}.")
        return

    embed = Embed(
        title=f"üìù –õ–æ–≥–∏ –∏–≥—Ä–æ–∫–∞ #{player_id} ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{pages}",
        color=discord.Color.dark_gray()
    )
    for log in logs:
        at = log["changed_at"][:19].replace("T", " ")
        embed.add_field(
            name=f"{at} ‚Äî {log['field_name']}",
            value=f"`{log['old_value']}` ‚Üí `{log['new_value']}`",
            inline=False
        )

    view = SafeView(timeout=120)
    prev_btn = ui.Button(label="‚óÄÔ∏è", style=discord.ButtonStyle.secondary)
    async def go_prev(interaction: discord.Interaction):
        await interaction.response.edit_message(view=None)
        await list_player_logs_view(ctx, player_id, max(1, page - 1))
    prev_btn.callback = go_prev
    view.add_item(prev_btn)

    next_btn = ui.Button(label="‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary)
    async def go_next(interaction: discord.Interaction):
        await interaction.response.edit_message(view=None)
        await list_player_logs_view(ctx, player_id, min(pages, page + 1))
    next_btn.callback = go_next
    view.add_item(next_btn)

    await send_temp(ctx, embed=embed, view=view)

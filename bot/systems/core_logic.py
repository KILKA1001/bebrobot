import discord
from discord.ext import commands
from typing import Optional
from datetime import datetime, timezone
import pytz
import asyncio
import traceback

from bot.data import db
from bot.utils.history_manager import format_history_embed
from bot.utils.roles_and_activities import ACTIVITY_CATEGORIES, ROLE_THRESHOLDS, display_last_edit_date
from collections import defaultdict
from bot.systems import (
    update_roles,
    render_history,
    log_action_cancellation,
    run_monthly_top,
    tophistory
)
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
COMMAND_PREFIX = '?'
TIME_FORMAT = "%H:%M (%d.%m.%Y)"
DATE_FORMAT = "%d-%m-%Y"        # 25-12-2023
DATETIME_FORMAT = "%Y-%m-%d %H:%M:%S"  # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

active_timers = {}

intents = discord.Intents.default()
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix=COMMAND_PREFIX, intents=intents, help_command=None)

def format_moscow_time(dt: Optional[datetime] = None) -> str:
    if dt is None:
        dt = datetime.now(timezone.utc)
    return dt.astimezone(pytz.timezone('Europe/Moscow')).strftime(TIME_FORMAT)

@bot.command(name='addpoints')
@commands.has_permissions(administrator=True)
async def add_points(ctx, member: discord.Member, points: str, *, reason: str = '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'):
    try:
        points_float = float(points.replace(',', '.'))
        user_id = member.id
        current = db.scores.get(user_id, 0)
        db.scores[user_id] = max(current + points_float, 0)
        db.add_action(user_id, points_float, reason, ctx.author.id)
        await update_roles(member)
        embed = discord.Embed(title="üéâ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!", color=discord.Color.green())
        embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", value=member.mention, inline=False)
        embed.add_field(name="‚ûï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", value=f"**{points}** –±–∞–ª–ª–æ–≤", inline=False)
        embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞:", value=reason, inline=False)
        embed.add_field(name="üïí –í—Ä–µ–º—è:", value=format_moscow_time(), inline=False)
        embed.add_field(name="üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:", value=f"{db.scores[user_id]} –±–∞–ª–ª–æ–≤", inline=False)
        await ctx.send(embed=embed)
    except ValueError:
        await ctx.send("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@bot.command(name='removepoints')
@commands.has_permissions(administrator=True)
async def remove_points(ctx, member: discord.Member, points: str, *, reason: str = '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'):
    try:
        points_float = float(points.replace(',', '.'))
        if points_float <= 0:
            await ctx.send("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 –¥–ª—è —Å–Ω—è—Ç–∏—è –±–∞–ª–ª–æ–≤.")
            return
        user_id = member.id
        current_points = db.scores.get(user_id, 0)
        if points_float > current_points:
            embed = discord.Embed(title="‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤", description=f"–£ {member.mention} —Ç–æ–ª—å–∫–æ {current_points} –±–∞–ª–ª–æ–≤", color=discord.Color.red())
            await ctx.send(embed=embed)
            return
        db.scores[user_id] = current_points - points_float
        db.add_action(user_id, -points_float, reason, ctx.author.id)
        await update_roles(member)
        embed = discord.Embed(title="‚ö†Ô∏è –ë–∞–ª–ª—ã —Å–Ω—è—Ç—ã!", color=discord.Color.red())
        embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", value=member.mention, inline=False)
        embed.add_field(name="‚ûñ –°–Ω—è—Ç–æ –±–∞–ª–ª–æ–≤:", value=f"**{points_float}**", inline=False)
        embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞:", value=reason, inline=False)
        embed.add_field(name="üïí –í—Ä–µ–º—è:", value=format_moscow_time(), inline=False)
        embed.add_field(name="üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:", value=f"{db.scores[user_id]} –±–∞–ª–ª–æ–≤", inline=False)
        await ctx.send(embed=embed)
    except ValueError:
        await ctx.send("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")

@bot.command(name='points')
async def points(ctx, member: Optional[discord.Member] = None):
    member = member or ctx.author
    if not member:
        await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    user_id = member.id
    user_points = db.scores.get(user_id, 0)
    user_roles = [role for role in member.roles if role.id in ROLE_THRESHOLDS]
    role_names = ', '.join(role.name for role in user_roles) if user_roles else '–ù–µ—Ç —Ä–æ–ª–∏'
    sorted_scores = sorted(db.scores.items(), key=lambda x: x[1], reverse=True)
    place = next((i for i, (uid, _) in enumerate(sorted_scores, 1) if uid == user_id), None)
    embed = discord.Embed(title=f"–ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.display_name}", color=discord.Color.blue())
    embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
    embed.add_field(name="–ë–∞–ª–ª—ã", value=f"{user_points}", inline=True)
    embed.add_field(name="–†–æ–ª–∏", value=role_names, inline=True)
    embed.add_field(name="–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ", value=f"{place}" if place else "–ù–µ –≤ —Ç–æ–ø–µ", inline=False)
    top_bonus_count = 0
    top_bonus_sum = 0.0
    for action in db.history.get(user_id, []):
        if action.get("reason", "").startswith("–ë–æ–Ω—É—Å –∑–∞ "):
            top_bonus_count += 1
            top_bonus_sum += action.get("points", 0)

    if top_bonus_count:
        embed.add_field(
            name="üèÜ –ë–æ–Ω—É—Å—ã –∑–∞ —Ç–æ–ø –º–µ—Å—è—Ü–∞",
            value=f"{top_bonus_count} –Ω–∞–≥—Ä–∞–¥, {top_bonus_sum:.2f} –±–∞–ª–ª–æ–≤",
            inline=False
        )
    await ctx.send(embed=embed)

@bot.command(name='leaderboard')
async def leaderboard(ctx, top: int = 10):
    if not db.scores:
        await ctx.send("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–ª–∞—Ö.")
        return

    sorted_scores = sorted(db.scores.items(), key=lambda x: x[1], reverse=True)[:top]
    embed = discord.Embed(title=f"üèÜ –¢–æ–ø {top} –ø–æ –±–∞–ª–ª–∞–º", color=discord.Color.gold())
    medals = ["ü•á", "ü•à", "ü•â"]

    for i, (user_id, points_val) in enumerate(sorted_scores, start=1):
        member = ctx.guild.get_member(user_id)
        medal = medals[i - 1] if i <= 3 else f"{i}."
        name = member.display_name if member else f"<@{user_id}>"
        roles = [role.name for role in member.roles if role.id in ROLE_THRESHOLDS] if member else []
        role_str = ', '.join(roles) if roles else '–ù–µ—Ç —Ä–æ–ª–∏'
        embed.add_field(
            name=f"{medal} {name}",
            value=f"**–ë–∞–ª–ª—ã:** {points_val:.2f}\n**–†–æ–ª—å:** {role_str}",
            inline=False
        )

    await ctx.send(embed=embed)

@bot.command(name='history')
async def history_cmd(ctx, member: Optional[discord.Member] = None, page: int = 1):
    if member is None:
        member = ctx.author
    if member:
        await render_history(ctx, member, page)
    else:
        await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.command(name='roles')
async def roles_list(ctx):
    desc = ""
    for role_id, points_needed in sorted(ROLE_THRESHOLDS.items(), key=lambda x: x[1], reverse=True):
        role = ctx.guild.get_role(role_id)
        if role:
            desc += f"**{role.name}**: {points_needed} –±–∞–ª–ª–æ–≤\n"
    embed = discord.Embed(title="–†–æ–ª–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–ª–ª–æ–≤", description=desc, color=discord.Color.purple())
    await ctx.send(embed=embed)

@bot.command(name='activities')
async def activities_cmd(ctx):
    embed = discord.Embed(
        title="üìã –í–∏–¥—ã –ø–æ–º–æ—â–∏ –∫–ª—É–±—É",
        description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –±–∞–ª–ª–∞—Ö:",
        color=discord.Color.blue()
    )
    def get_points_word(points):
        if points % 10 == 1 and points % 100 != 11:
            return "–±–∞–ª–ª"
        elif 2 <= points % 10 <= 4 and (points % 100 < 10 or points % 100 >= 20):
            return "–±–∞–ª–ª–∞"
        else:
            return "–±–∞–ª–ª–æ–≤"

    for category_name, activities in ACTIVITY_CATEGORIES.items():
        category_text = ""
        for activity_name, info in activities.items():
            category_text += f"**{activity_name}** ({info['points']} {get_points_word(info['points'])})\n"
            category_text += f"‚Ü≥ {info['description']}\n"
            if 'conditions' in info:
                category_text += "–£—Å–ª–æ–≤–∏—è:\n"
                for condition in info['conditions']:
                    category_text += f"‚Ä¢ {condition}\n"
            category_text += "\n"
        embed.add_field(name=category_name, value=category_text, inline=False)
    embed.set_footer(text=display_last_edit_date())
    await ctx.send(embed=embed)


@bot.command(name='undo')
@commands.has_permissions(administrator=True)
async def undo(ctx, member: discord.Member, count: int = 1):
    user_id = member.id
    user_history = db.history.get(user_id, [])
    if len(user_history) < count:
        await ctx.send(
            f"‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å **{count}** –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {member.display_name}, "
            f"—Ç–∞–∫ –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ **{len(user_history)}** –∑–∞–ø–∏—Å–µ–π."
        )
        return

    undo_entries = []
    for _ in range(count):
        entry = user_history.pop()
        points_val = entry.get("points", 0)
        reason = entry.get("reason", "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã")
        undo_entries.append((points_val, reason))

        # –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω—ã –≤ –±–∞–∑—É
        db.add_action(
            user_id=user_id,
            points=-points_val,
            reason=f"–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è: {reason}",
            author_id=ctx.author.id,
            is_undo=True
        )

    if not user_history:
        del db.history[user_id]

    await update_roles(member)

    embed = discord.Embed(
        title=f"‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ {count} –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {member.display_name}",
        color=discord.Color.orange()
    )
    for i, (points_val, reason) in enumerate(undo_entries[::-1], start=1):
        sign = "+" if points_val > 0 else ""
        embed.add_field(name=f"{i}. {sign}{points_val} –±–∞–ª–ª–æ–≤", value=reason, inline=False)
    await ctx.send(embed=embed)
    await log_action_cancellation(ctx, member, undo_entries)

@bot.command(name='monthlytop')
@commands.has_permissions(administrator=True)
async def monthly_top(ctx):
    await run_monthly_top(ctx)

@bot.command(name='tophistory')
async def tophistory_cmd(ctx, month: Optional[int] = None, year: Optional[int] = None):
    await tophistory(ctx, month, year)

@bot.command(name='helpy')
async def helpy_cmd(ctx):
    embed = discord.Embed(
        title="üõ†Ô∏è –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
        description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º:",
        color=discord.Color.blue()
    )

    embed.add_field(
        name="‚öôÔ∏è –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã",
        value=(
            "`?addpoints @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <–±–∞–ª–ª—ã> [–ø—Ä–∏—á–∏–Ω–∞]` ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã\n"
            "`?removepoints @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <–±–∞–ª–ª—ã> [–ø—Ä–∏—á–∏–Ω–∞]` ‚Äî —Å–Ω—è—Ç—å –±–∞–ª–ª—ã\n"
            "`?undo @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <–∫–æ–ª-–≤–æ>` ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "`?monthlytop` ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ —Ç–æ–ø –º–µ—Å—è—Ü–∞\n"
            "`?editfine <id> —Å—É–º–º–∞ —Ç–∏–ø –¥–∞—Ç–∞ –ø—Ä–∏—á–∏–Ω–∞` ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∞—Ñ\n"
            "`?cancel_fine <id>` ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∞—Ñ\n"
            "`?allfines` ‚Äî –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã"
        ),
        inline=False
    )

    embed.add_field(
        name="üìä –ë–∞–ª–ª—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥",
        value=(
            "`?points [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]` ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã\n"
            "`?leaderboard [–∫–æ–ª-–≤–æ]` ‚Äî —Ç–æ–ø –ø–æ –±–∞–ª–ª–∞–º\n"
            "`?history [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [—Å—Ç—Ä–∞–Ω–∏—Ü–∞]` ‚Äî –∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π"
        ),
        inline=False
    )

    embed.add_field(
        name="üèÖ –†–æ–ª–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        value=(
            "`?roles` ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –∏ –∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
            "`?activities` ‚Äî –±–∞–ª–ª—ã –∑–∞ –≤–∏–¥—ã –ø–æ–º–æ—â–∏"
        ),
        inline=False
    )

    embed.add_field(
        name="üìÜ –¢–æ–ø –º–µ—Å—è—Ü–∞",
        value=(
            "`?monthlytop` ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
            "`?tophistory [–º–µ—Å—è—Ü] [–≥–æ–¥]` ‚Äî –∏—Å—Ç–æ—Ä–∏—è –Ω–∞–≥—Ä–∞–¥ –∑–∞ —Ç–æ–ø"
        ),
        inline=False
    )

    embed.add_field(
        name="üìâ –®—Ç—Ä–∞—Ñ—ã",
        value=(
            "`?fine @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <—Å—É–º–º–∞> <—Ç–∏–ø> [–ø—Ä–∏—á–∏–Ω–∞]` ‚Äî –≤—ã–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ\n"
            "`?myfines` ‚Äî –≤–∞—à–∏ —à—Ç—Ä–∞—Ñ—ã\n"
            "`?finehistory [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [—Å—Ç—Ä–∞–Ω–∏—Ü–∞]` ‚Äî –∏—Å—Ç–æ—Ä–∏—è —à—Ç—Ä–∞—Ñ–æ–≤\n"
            "`?finedetails <id>` ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —à—Ç—Ä–∞—Ñ–∞\n"
            "`?topfines` ‚Äî —Ç–æ–ø –¥–æ–ª–∂–Ω–∏–∫–æ–≤"
        ),
        inline=False
    )

    embed.add_field(
        name="üß™ –ü—Ä–æ—á–µ–µ",
        value="`?ping` ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–∏–∫–∞\n`?helpy` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        inline=False
    )

    await ctx.send(embed=embed)

@bot.command()
async def ping(ctx):
    await ctx.send('pong')

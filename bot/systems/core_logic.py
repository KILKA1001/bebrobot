import discord
from discord.ext import commands
from typing import Optional
from datetime import datetime, timezone, timedelta
from collections import defaultdict
import pytz
import asyncio
import traceback

from bot.data import db
from bot.utils.roles_and_activities import ROLE_THRESHOLDS
from bot.utils import send_temp, build_top_embed
from bot.utils.history_manager import format_history_embed

TIME_FORMAT = "%H:%M (%d.%m.%Y)"
active_timers = {}

def format_moscow_time(dt: Optional[datetime] = None) -> str:
  if dt is None:
      dt = datetime.now(timezone.utc)
  return dt.astimezone(pytz.timezone('Europe/Moscow')).strftime(TIME_FORMAT)
  
async def update_roles(member: discord.Member):
    user_id = member.id
    user_points = db.scores.get(user_id, 0)
    user_roles = [role.id for role in member.roles if role.id in ROLE_THRESHOLDS]

    role_to_add_id = None
    for role_id, threshold in sorted(ROLE_THRESHOLDS.items(), key=lambda x: x[1], reverse=True):
        if user_points >= threshold:
            role_to_add_id = role_id
            break

    if role_to_add_id and role_to_add_id not in user_roles:
        role_to_add = member.guild.get_role(role_to_add_id)
        if role_to_add:
            await member.add_roles(role_to_add)

    for role_id in user_roles:
        if role_id != role_to_add_id:
            role_to_remove = member.guild.get_role(role_id)
            if role_to_remove:
                await member.remove_roles(role_to_remove)


class HistoryView(discord.ui.View):
    def __init__(self, member: discord.Member, page: int, total_pages: int):
        super().__init__(timeout=60)
        self.member = member
        self.page = page
        self.total_pages = total_pages

        self.prev_button.disabled = page <= 1
        self.next_button.disabled = page >= total_pages

    @discord.ui.button(label="‚óÄÔ∏è –ù–∞–∑–∞–¥", style=discord.ButtonStyle.gray, custom_id="prev")
    async def prev_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await render_history(interaction, self.member, self.page - 1)

    @discord.ui.button(label="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", style=discord.ButtonStyle.gray, custom_id="next")
    async def next_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        await render_history(interaction, self.member, self.page + 1)


async def render_history(ctx_or_interaction, member: discord.Member, page: int):
    try:
        user_id = member.id
        entries_per_page = 5
        user_history = db.history.get(user_id, [])

        if not user_history:
            embed = discord.Embed(
                title="üìú –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–ª–æ–≤",
                description="```–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ```",
                color=discord.Color.orange()
            )
            embed.set_author(name=member.display_name, icon_url=member.avatar.url if member.avatar else member.default_avatar.url)

            if isinstance(ctx_or_interaction, discord.Interaction):
                await ctx_or_interaction.response.send_message(embed=embed, ephemeral=True)
            else:
                await ctx_or_interaction.send(embed=embed)
            return

        total_entries = len(user_history)
        total_pages = max(1, (total_entries + entries_per_page - 1) // entries_per_page)

        if page < 1 or page > total_pages:
            embed = discord.Embed(
                title="‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                description=f"```–î–æ—Å—Ç—É–ø–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}```",
                color=discord.Color.red()
            )
            if isinstance(ctx_or_interaction, discord.Interaction):
                await ctx_or_interaction.response.send_message(embed=embed, ephemeral=True)
            else:
                await ctx_or_interaction.send(embed=embed)
            return

        start_idx = (page - 1) * entries_per_page
        page_actions = user_history[start_idx:start_idx + entries_per_page]

        embed = discord.Embed(title="üìú –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–ª–æ–≤", color=discord.Color.blue())
        embed.set_author(name=member.display_name, icon_url=member.avatar.url if member.avatar else member.default_avatar.url)

        total_points = db.scores.get(user_id, 0)
        embed.add_field(name="üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", value=f"```{total_points} –±–∞–ª–ª–æ–≤```", inline=False)

        for action in page_actions:
            points = action.get('points', 0)
            emoji = "üü¢" if points >= 0 else "üî¥"
            if action.get('is_undo', False):
                emoji = "‚ö™"

            timestamp = action.get('timestamp')
            if isinstance(timestamp, str):
                try:
                    dt = datetime.fromisoformat(timestamp)
                    formatted_time = dt.astimezone(pytz.timezone('Europe/Moscow')).strftime("%H:%M (%d.%m.%Y)")
                except ValueError:
                    formatted_time = timestamp
            else:
                formatted_time = timestamp.strftime("%H:%M (%d.%m.%Y)") if timestamp else 'N/A'

            author_id = action.get('author_id', 'N/A')
            reason = action.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

            field_name = f"{emoji} {formatted_time}"
            field_value = (
                f"```diff\n{'+' if points >= 0 else ''}{points} –±–∞–ª–ª–æ–≤```\n"
                f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n"
                f"**–í—ã–¥–∞–ª:** <@{author_id}>"
            )
            embed.add_field(name=field_name, value=field_value, inline=False)

        embed.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages} ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_entries}")

        view = HistoryView(member, page, total_pages)

        if isinstance(ctx_or_interaction, discord.Interaction):
            if ctx_or_interaction.response.is_done():
                sent_message = await ctx_or_interaction.edit_original_response(embed=embed, view=view)
            else:
                await ctx_or_interaction.response.send_message(embed=embed, view=view)
                sent_message = await ctx_or_interaction.original_response()
        else:
            sent_message = await send_temp(ctx_or_interaction, embed=embed, view=view)

    except Exception as e:
        error_embed = discord.Embed(
            title="‚ö†Ô∏è –û—à–∏–±–∫–∞",
            description=f"```{str(e)}```",
            color=discord.Color.red()
        )
        if isinstance(ctx_or_interaction, discord.Interaction):
            await ctx_or_interaction.response.send_message(embed=error_embed, ephemeral=True)
        else:
            await ctx_or_interaction.send(embed=error_embed)
        print(f"–û—à–∏–±–∫–∞ –≤ render_history: {traceback.format_exc()}")


async def log_action_cancellation(ctx, member: discord.Member, entries: list):
    channel = discord.utils.get(ctx.guild.channels, name='history-log')
    if not channel:
        return

    now = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
    lines = [f"**{ctx.author.display_name}** –æ—Ç–º–µ–Ω–∏–ª(–∞) {len(entries)} –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è **{member.display_name}** ({member.id}) –≤ {now}:"]
    for i, (points, reason) in enumerate(entries[::-1], start=1):
        sign = "+" if points > 0 else ""
        lines.append(f"{i}. {sign}{points} ‚Äî {reason}")

    await channel.send("\n".join(lines))


async def run_monthly_top(ctx):
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    current_month = now.month
    current_year = now.year
    from collections import defaultdict
    monthly_scores = defaultdict(float)
    for action in db.actions:
        if action.get('is_undo'):
            continue
        timestamp = action.get('timestamp')
        if isinstance(timestamp, str):
            try:
                dt = datetime.fromisoformat(timestamp)
            except ValueError:
                continue
            if dt.month == current_month and dt.year == current_year:
                uid = int(action['user_id'])
                monthly_scores[uid] += float(action['points'])
    if not monthly_scores:
        await send_temp(ctx, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–ª–∞—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
        return

    top_users = sorted(monthly_scores.items(), key=lambda x: x[1], reverse=True)[:3]
    percentages = [0.125, 0.075, 0.05]

    entries_to_log = []
    formatted = []

    for i, (uid, score) in enumerate(top_users):
        percent = percentages[i]
        bonus = round(score * percent, 2)
        db.add_action(uid, bonus, f"–ë–æ–Ω—É—Å –∑–∞ {i + 1} –º–µ—Å—Ç–æ ({score} –±–∞–ª–ª–æ–≤)", ctx.author.id)
        member = ctx.guild.get_member(uid)
        name = member.display_name if member else f"<@{uid}>"

        formatted.append(
            (name, f"{i + 1} –º–µ—Å—Ç–æ\n–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {score:.2f} –±–∞–ª–ª–æ–≤\n–ë–æ–Ω—É—Å: +{bonus:.2f} –±–∞–ª–ª–æ–≤")
        )
        entries_to_log.append((uid, score, percent))

    db.log_monthly_top(entries_to_log)
    embed = build_top_embed("üèÜ –¢–æ–ø –º–µ—Å—è—Ü–∞", formatted, color=discord.Color.gold())
    await send_temp(ctx, embed=embed)


async def tophistory(ctx, month: Optional[int] = None, year: Optional[int] = None):
    now = datetime.now()
    month = month or now.month
    year = year or now.year

    if not db.supabase:
        await send_temp(ctx, "‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return

    try:
        response = db.supabase \
            .table("monthly_top_log") \
            .select("*") \
            .eq("month", month) \
            .eq("year", year) \
            .order("place") \
            .execute()

        entries = response.data
        if not entries:
            await send_temp(ctx, f"üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ {month:02d}.{year}")
            return

        formatted = []
        for entry in entries:
            uid = entry['user_id']
            place = entry['place']
            bonus = entry['bonus']
            member = ctx.guild.get_member(uid)
            name = member.display_name if member else f"<@{uid}>"
            formatted.append((name, f"{place} –º–µ—Å—Ç–æ ‚Ä¢ +{bonus} –±–∞–ª–ª–æ–≤"))

        embed = build_top_embed(
            title=f"üìÖ –ò—Å—Ç–æ—Ä–∏—è —Ç–æ–ø–∞ ‚Äî {month:02d}.{year}",
            entries=formatted,
            color=discord.Color.green(),
        )
        await send_temp(ctx, embed=embed)

    except Exception as e:
        await send_temp(ctx, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

class HelpView(discord.ui.View):
    def __init__(self, user: discord.Member):
        super().__init__(timeout=120)
        self.user = user

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.user.id

    async def update_embed(self, interaction: discord.Interaction, category: str):
        embed = get_help_embed(category)
        await interaction.response.edit_message(embed=embed, view=self)

    @discord.ui.button(label="üìä –ë–∞–ª–ª—ã", style=discord.ButtonStyle.blurple, row=0)
    async def points_btn(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.update_embed(interaction, "points")

    @discord.ui.button(label="üèÖ –†–æ–ª–∏", style=discord.ButtonStyle.green, row=0)
    async def roles_btn(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.update_embed(interaction, "roles")

    @discord.ui.button(label="üìâ –®—Ç—Ä–∞—Ñ—ã", style=discord.ButtonStyle.gray, row=1)
    async def fines_btn(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.update_embed(interaction, "fines")

    @discord.ui.button(label="üß™ –ü—Ä–æ—á–µ–µ", style=discord.ButtonStyle.secondary, row=1)
    async def misc_btn(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.update_embed(interaction, "misc")

    @discord.ui.button(label="üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", style=discord.ButtonStyle.red, row=1)
    async def admin_category_btn(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not self.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", ephemeral=True)
            return
        embed = discord.Embed(title="üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", color=discord.Color.red())
        await interaction.response.edit_message(embed=embed, view=AdminCategoryView(self.user))

def get_help_embed(category: str) -> discord.Embed:
    embed = discord.Embed(title="üõ†Ô∏è –°–ø—Ä–∞–≤–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥", color=discord.Color.blue())

    if category == "points":
        embed.title = "üìä –ë–∞–ª–ª—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥"
        embed.description = (
            "`?balance [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
            "`?leaderboard` ‚Äî —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–ª–∞–º\n"
            "`?history [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [—Å—Ç—Ä–∞–Ω–∏—Ü–∞]` ‚Äî –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–ª–æ–≤"
        )
    elif category == "roles":
        embed.title = "üèÖ –†–æ–ª–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        embed.description = (
            "`?roles` ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
            "`?activities` ‚Äî –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Ö –±–∞–ª–ª—ã"
        )
    elif category == "fines":
        embed.title = "üìâ –®—Ç—Ä–∞—Ñ—ã"
        embed.description = (
            "`?myfines` ‚Äî –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã\n"
            "`?finehistory [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [—Å—Ç—Ä–∞–Ω–∏—Ü–∞]` ‚Äî –∏—Å—Ç–æ—Ä–∏—è —à—Ç—Ä–∞—Ñ–æ–≤\n"
            "`?finedetails ID` ‚Äî –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à—Ç—Ä–∞—Ñ–∞"
        )
    elif category == "misc":
        embed.title = "üß™ –ü—Ä–æ—á–µ–µ"
        embed.description = (
            "`?ping` ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç\n"
            "`?helpy` ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å–ø—Ä–∞–≤–∫–∏\n"
            "`?tophistory [–º–µ—Å—è—Ü] [–≥–æ–¥]` ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Ç–æ–ø–æ–≤ –º–µ—Å—è—Ü–∞"
        )
    elif category == "admin_points":
        embed.title = "‚öôÔ∏è –ê–¥–º–∏–Ω: –ë–∞–ª–ª—ã –∏ –±–∏–ª–µ—Ç—ã"
        embed.description = (
            "`?addpoints @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–º–º–∞ [–ø—Ä–∏—á–∏–Ω–∞]` ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã\n"
            "`?removepoints @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–º–º–∞ [–ø—Ä–∏—á–∏–Ω–∞]` ‚Äî —Å–Ω—è—Ç—å –±–∞–ª–ª—ã\n"
            "`?undo @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [–∫–æ–ª-–≤–æ]` ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "`?monthlytop` ‚Äî –±–æ–Ω—É—Å—ã –∑–∞ —Ç–æ–ø –º–µ—Å—è—Ü–∞\n"
            "`?addticket @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∏–ø –∫–æ–ª-–≤–æ [–ø—Ä–∏—á–∏–Ω–∞]` ‚Äî –≤—ã–¥–∞—Ç—å –±–∏–ª–µ—Ç\n"
            "`?removeticket @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∏–ø –∫–æ–ª-–≤–æ [–ø—Ä–∏—á–∏–Ω–∞]` ‚Äî —Å–ø–∏—Å–∞—Ç—å –±–∏–ª–µ—Ç"
        )
    elif category == "admin_fines":
        embed.title = "üìâ –ê–¥–º–∏–Ω: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞–º–∏"
        embed.description = (
            "`?fine @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–º–º–∞ —Ç–∏–ø [–ø—Ä–∏—á–∏–Ω–∞]` ‚Äî –≤—ã–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ (—Ç–∏–ø: 1 ‚Äî –æ–±—ã—á–Ω—ã–π, 2 ‚Äî —É—Å–∏–ª–µ–Ω–Ω—ã–π)\n"
            "`?editfine ID —Å—É–º–º–∞ —Ç–∏–ø –¥–∞—Ç–∞ –ø—Ä–∏—á–∏–Ω–∞` ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à—Ç—Ä–∞—Ñ–∞ (–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)\n"
            "`?cancel_fine ID` ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∞—Ñ\n"
            "`?topfines` ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-–¥–æ–ª–∂–Ω–∏–∫–æ–≤ –ø–æ —Å—É–º–º–µ —à—Ç—Ä–∞—Ñ–æ–≤\n"
            "`?allfines` ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤"
        )
    elif category == "admin_bank":
        embed.title = "üè¶ –ê–¥–º–∏–Ω: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–º"
        embed.description = (
            "`?bank` ‚Äî –±–∞–ª–∞–Ω—Å –±–∞–Ω–∫–∞\n"
            "`?bankadd —Å—É–º–º–∞ –ø—Ä–∏—á–∏–Ω–∞` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã –≤ –±–∞–Ω–∫\n"
            "`?bankspend —Å—É–º–º–∞ –ø—Ä–∏—á–∏–Ω–∞` ‚Äî –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã –∏–∑ –±–∞–Ω–∫–∞\n"
            "`?bankhistory` ‚Äî –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"
        )
    elif category == "admin_players":
        embed.title = "üë• –ê–¥–º–∏–Ω: –ò–≥—Ä–æ–∫–∏"
        embed.description = (
            "`?register <nick> <@tg>` –∏–ª–∏ `?register <id> <tournament>` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
            "`?listplayers [—Å—Ç—Ä–∞–Ω–∏—Ü–∞]` ‚Äî —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤\n"
            "`?editplayer id –ø–æ–ª–µ –∑–Ω–∞—á–µ–Ω–∏–µ` ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞\n"
            "`?deleteplayer id` ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
            "`?unregister id tournament` ‚Äî —É–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞\n"
            "`?playerlogs id [—Å—Ç—Ä–∞–Ω–∏—Ü–∞]` ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∞–≤–æ–∫"
        )
    elif category == "admin_tournaments":
        embed.title = "üèü –ê–¥–º–∏–Ω: –¢—É—Ä–Ω–∏—Ä—ã"
        embed.description = (
            "`?createtournament` ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä\n"
            "`?managetournament id` ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º\n"
            "`?deletetournament id` ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä\n"
            "`?tournamentannounce id` ‚Äî –æ–±—ä—è–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        )
    return embed

class AdminCategoryView(discord.ui.View):
    def __init__(self, user: discord.Member):
        super().__init__(timeout=120)
        self.user = user

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        return interaction.user.id == self.user.id

    async def send_category(self, interaction, category: str):
        embed = get_help_embed(category)
        await interaction.response.edit_message(embed=embed, view=self)

    @discord.ui.button(label="‚öôÔ∏è –ë–∞–ª–ª—ã", style=discord.ButtonStyle.blurple, row=0)
    async def points_admin(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.send_category(interaction, "admin_points")

    @discord.ui.button(label="üìâ –®—Ç—Ä–∞—Ñ—ã", style=discord.ButtonStyle.gray, row=0)
    async def fines_admin(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.send_category(interaction, "admin_fines")

    @discord.ui.button(label="üè¶ –ë–∞–Ω–∫", style=discord.ButtonStyle.green, row=0)
    async def bank_admin(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.send_category(interaction, "admin_bank")

    @discord.ui.button(label="üë• –ò–≥—Ä–æ–∫–∏", style=discord.ButtonStyle.blurple, row=0)
    async def players_admin(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.send_category(interaction, "admin_players")

    @discord.ui.button(label="üèü –¢—É—Ä–Ω–∏—Ä—ã", style=discord.ButtonStyle.green, row=0)
    async def tournaments_admin(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.send_category(interaction, "admin_tournaments")

    @discord.ui.button(label="üîô –ù–∞–∑–∞–¥", style=discord.ButtonStyle.secondary, row=1)
    async def back_btn(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = get_help_embed("points")
        await interaction.response.edit_message(embed=embed, view=HelpView(self.user))

class LeaderboardView(discord.ui.View):
    def __init__(self, ctx, mode="all", page=1):
        super().__init__(timeout=120)
        self.ctx = ctx
        self.mode = mode
        self.page = page
        self.page_size = 5
        self.update_embed_data()

    def update_embed_data(self):
        if self.mode == "week":
            self.entries = self.get_scores_by_range(days=7)
        elif self.mode == "month":
            self.entries = self.get_scores_by_range(days=30)
        else:
            self.entries = sorted(db.scores.items(), key=lambda x: x[1], reverse=True)

        self.total_pages = max(1, (len(self.entries) + self.page_size - 1) // self.page_size)

    def get_scores_by_range(self, days):
        now = datetime.now(timezone.utc)
        cutoff = now - timedelta(days=days)
        temp_scores = defaultdict(float)
        for entry in db.actions:
            if entry.get("is_undo"):
                continue
            ts = entry.get("timestamp")
            if not ts:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ timestamp
            if isinstance(ts, str):
                try:
                    ts = datetime.fromisoformat(ts)
                except Exception:
                    continue
            if not ts or not isinstance(ts, datetime):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            if ts >= cutoff:
                temp_scores[int(entry["user_id"])] += float(entry["points"])
        return sorted(temp_scores.items(), key=lambda x: x[1], reverse=True)

    def get_embed(self):
        start = (self.page - 1) * self.page_size
        entries = self.entries[start:start + self.page_size]

        if not entries:
            embed = discord.Embed(
                title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                description="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                color=discord.Color.gold(),
            )
            embed.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page}/{self.total_pages} ‚Ä¢ –†–µ–∂–∏–º: {self.mode}")
            return embed

        formatted = []
        for uid, points in entries:
            member = self.ctx.guild.get_member(uid)
            name = member.display_name if member else f"<@{uid}>"

            roles = []
            if member:
                roles = [r.name for r in member.roles if r.id in ROLE_THRESHOLDS]
            role_text = f"\n–†–æ–ª—å: {', '.join(roles)}" if roles else ""
            formatted.append((name, f"**{points:.2f}** –±–∞–ª–ª–æ–≤{role_text}"))

        footer = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page}/{self.total_pages} ‚Ä¢ –†–µ–∂–∏–º: {self.mode}"
        return build_top_embed(
            title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            entries=formatted,
            color=discord.Color.gold(),
            footer=footer,
        )

    @discord.ui.button(label="‚óÄÔ∏è", style=discord.ButtonStyle.gray)
    async def prev_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.page > 1:
            self.page -= 1
            await interaction.response.edit_message(embed=self.get_embed(), view=self)

    @discord.ui.button(label="‚ñ∂Ô∏è", style=discord.ButtonStyle.gray)
    async def next_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.page < self.total_pages:
            self.page += 1
            await interaction.response.edit_message(embed=self.get_embed(), view=self)

    @discord.ui.button(label="–ù–µ–¥–µ–ª—è", style=discord.ButtonStyle.blurple)
    async def mode_week(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.mode = "week"
        self.page = 1
        self.update_embed_data()
        await interaction.response.edit_message(embed=self.get_embed(), view=self)

    @discord.ui.button(label="–ú–µ—Å—è—Ü", style=discord.ButtonStyle.blurple)
    async def mode_month(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.mode = "month"
        self.page = 1
        self.update_embed_data()
        await interaction.response.edit_message(embed=self.get_embed(), view=self)

    @discord.ui.button(label="–í—Å–µ –≤—Ä–µ–º—è", style=discord.ButtonStyle.green)
    async def mode_all(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.mode = "all"
        self.page = 1
        self.update_embed_data()
        await interaction.response.edit_message(embed=self.get_embed(), view=self)

async def transfer_data_logic(old_id: int, new_id: int) -> discord.Embed:
    success = db.transfer_user_data(old_id, new_id)

    if success:
        embed = discord.Embed(
            title="‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã",
            color=discord.Color.green()
        )
        embed.add_field(name="üì§ –û—Ç:", value=f"<@{old_id}> (`{old_id}`)", inline=False)
        embed.add_field(name="üì• –ö–æ–º—É:", value=f"<@{new_id}> (`{new_id}`)", inline=False)
        embed.set_footer(text="–ü–µ—Ä–µ–Ω–æ—Å –±–∞–ª–ª–æ–≤, –±–∏–ª–µ—Ç–æ–≤ –∏ –ª–æ–≥–æ–≤")
    else:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö",
            description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
            color=discord.Color.red()
        )
    return embed

def build_balance_embed(member: discord.Member) -> discord.Embed:
    user_id = member.id
    points = db.scores.get(user_id, 0)
    roles = [role for role in member.roles if role.id in ROLE_THRESHOLDS]
    role_names = ', '.join(role.name for role in roles) if roles else '–ù–µ—Ç —Ä–æ–ª–∏'

    sorted_scores = sorted(db.scores.items(), key=lambda x: x[1], reverse=True)
    place = next((i for i, (uid, _) in enumerate(sorted_scores, 1) if uid == user_id), None)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–ª–µ—Ç—ã
    try:
        result = db.supabase.table("scores").select("tickets_normal, tickets_gold").eq("user_id", user_id).single().execute()
        data = result.data or {}
    except Exception:
        data = {}

    normal = data.get("tickets_normal", 0)
    gold = data.get("tickets_gold", 0)

    embed = discord.Embed(
        title=f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.display_name}",
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)

    embed.add_field(name="üéØ –ë–∞–ª–ª—ã", value=f"{points}", inline=True)
    embed.add_field(name="üéü –û–±—ã—á–Ω—ã–µ –±–∏–ª–µ—Ç—ã", value=f"{normal}", inline=True)
    embed.add_field(name="ü™ô –ó–æ–ª–æ—Ç—ã–µ –±–∏–ª–µ—Ç—ã", value=f"{gold}", inline=True)
    embed.add_field(name="üèÖ –†–æ–ª–∏", value=role_names, inline=False)
    embed.add_field(name="üìä –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ", value=f"{place}" if place else "–ù–µ –≤ —Ç–æ–ø–µ", inline=False)

    # ‚ûï –î–æ–±–∞–≤–∏–º –±–æ–Ω—É—Å—ã –∑–∞ —Ç–æ–ø –º–µ—Å—è—Ü–∞
    top_bonus_count = 0
    top_bonus_sum = 0.0
    for action in db.history.get(user_id, []):
        if action.get("reason", "").startswith("–ë–æ–Ω—É—Å –∑–∞ "):
            top_bonus_count += 1
            top_bonus_sum += action.get("points", 0)

    if top_bonus_count:
        embed.add_field(
            name="üèÜ –ë–æ–Ω—É—Å—ã –∑–∞ —Ç–æ–ø –º–µ—Å—è—Ü–∞",
            value=f"{top_bonus_count} –Ω–∞–≥—Ä–∞–¥, {top_bonus_sum:.2f} –±–∞–ª–ª–æ–≤",
            inline=False
        )

    return embed
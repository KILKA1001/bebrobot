from discord import Embed, Interaction, ButtonStyle, SelectOption
from discord.ui import View, Button, Select


from bot.systems.tournament_logic import Tournament

class RoundManagementView(View):
    """UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞."""

    persistent = True

    def __init__(self, tournament_id: int, logic: Tournament):
        super().__init__(timeout=None)
        self.tournament_id = tournament_id
        self.logic = logic

        start_btn = Button(
            label="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥",
            style=ButtonStyle.green,
            custom_id=f"start_round:{tournament_id}",
            row=0,
        )
        start_btn.callback = self.on_start_round
        self.add_item(start_btn)

        next_btn = Button(
            label="‚è≠ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É",
            style=ButtonStyle.blurple,
            custom_id=f"next_round:{tournament_id}",
            row=0,
        )
        next_btn.callback = self.on_next_round
        self.add_item(next_btn)

        stop_btn = Button(
            label="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—É–Ω–¥",
            style=ButtonStyle.red,
            custom_id=f"stop_round:{tournament_id}",
            row=1,
        )
        stop_btn.callback = self.on_stop_round
        self.add_item(stop_btn)

        status_btn = Button(
            label="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å",
            style=ButtonStyle.gray,
            custom_id=f"status_round:{tournament_id}",
            row=1,
        )
        status_btn.callback = self.on_status_round
        self.add_item(status_btn)

        manage_btn = Button(
            label="‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞–º–∏",
            style=ButtonStyle.primary,
            custom_id=f"manage_rounds:{tournament_id}",
            row=2,
        )
        manage_btn.callback = self.on_manage_rounds
        self.add_item(manage_btn)


    async def on_start_round(self, interaction: Interaction):
        embed = self.logic.start_round(self.tournament_id)
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_next_round(self, interaction: Interaction):
        embed = self.logic.generate_next_round(self.tournament_id)
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_stop_round(self, interaction: Interaction):
        embed = self.logic.get_current_round_embed(self.tournament_id)
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_status_round(self, interaction: Interaction):
        embed = self.logic.get_current_round_embed(self.tournament_id)
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_manage_rounds(self, interaction: Interaction):
        """–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞–º–∏."""
        embed = Embed(
            title=f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º #{self.tournament_id}",
            description=(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—É–Ω–¥–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ **‚ñ∂Ô∏è** –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞."
            ),
            color=0xF39C12
        )
        view = RoundManagementView(self.tournament_id, self.logic)
        await interaction.response.edit_message(embed=embed, view=view)

class MatchResultView(View):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π."""
    def __init__(self, tournament_id: int, logic: Tournament, matches: list):
        super().__init__(timeout=None)
        self.tournament_id = tournament_id
        self.logic = logic

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ –¥–æ–±–∞–≤–ª—è–µ–º select-–º–µ–Ω—é
        for match in matches:
            options = [
                SelectOption(label=f"–ü–æ–±–µ–¥–∞ {match.player_a}", value=f"{match.id}:A"),
                SelectOption(label=f"–ü–æ–±–µ–¥–∞ {match.player_b}", value=f"{match.id}:B"),
                SelectOption(label="–ù–∏—á—å—è", value=f"{match.id}:D"),
            ]
            self.add_item(MatchResultSelect(tournament_id, logic, options))

class MatchResultSelect(Select):
    def __init__(self, tournament_id: int, logic: Tournament, options: list):
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥ –º–∞—Ç—á–∞", options=options)
        self.tournament_id = tournament_id
        self.logic = logic

    async def callback(self, interaction: Interaction):
        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä: match_id –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        raw = interaction.values[0]
        match_id_str, result_code = raw.split(':', 1)
        match_id = int(match_id_str)
        # record_result –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Ç—É—Ä–Ω–∏—Ä–æ–º.recordResult ‚Äî —É—á–µ—Å—Ç—å, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏
        embed = self.logic.record_result(self.tournament_id, match_id, result_code)
        await interaction.response.edit_message(embed=embed, view=self.view)

# –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
async def announce_round_management(channel, tournament_id: int, logic: Tournament):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç embed-–ø–æ–¥–ª–æ–∂–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞–º–∏.
    """
    embed = Embed(
        title=f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º #{tournament_id}",
        description=(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—É–Ω–¥–æ–≤.\n"
            "–ù–∞–∂–º–∏—Ç–µ **‚ñ∂Ô∏è** –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞."
        ),
        color=0xF39C12
    )
    view = RoundManagementView(tournament_id, logic)
    await channel.send(embed=embed, view=view)


from discord import Embed, Interaction, ButtonStyle, SelectOption
from discord.ui import View, Button, Select, button

from bot.systems.tournament_logic import Tournament

class RoundManagementView(View):
    """UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞."""

    persistent = True

    def __init__(self, tournament_id: int, logic: Tournament):
        super().__init__(timeout=None)
        self.tournament_id = tournament_id
        self.logic = logic

        self.start_round_button = Button(
            label="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥",
            style=ButtonStyle.green,
            custom_id=f"start_round:{tournament_id}",
            row=0,
        )
        self.start_round_button.callback = self.on_start_round
        self.add_item(self.start_round_button)

        self.next_round_button = Button(
            label="‚è≠ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É",
            style=ButtonStyle.blurple,
            custom_id=f"next_round:{tournament_id}",
            row=0,
        )
        self.next_round_button.callback = self.on_next_round
        self.add_item(self.next_round_button)

        self.stop_round_button = Button(
            label="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—É–Ω–¥",
            style=ButtonStyle.red,
            custom_id=f"stop_round:{tournament_id}",
            row=1,
        )
        self.stop_round_button.callback = self.on_stop_round
        self.add_item(self.stop_round_button)

        self.status_round_button = Button(
            label="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å",
            style=ButtonStyle.gray,
            custom_id=f"status_round:{tournament_id}",
            row=1,
        )
        self.status_round_button.callback = self.on_status_round
        self.add_item(self.status_round_button)

        self.manage_rounds_button = Button(
            label="‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞–º–∏",
            style=ButtonStyle.primary,
            custom_id=f"manage_rounds:{tournament_id}",
            row=2,
        )
        self.manage_rounds_button.callback = self.on_manage_rounds
        self.add_item(self.manage_rounds_button)

    async def on_start_round(self, interaction: Interaction):
        embed = self.logic.start_round(self.tournament_id)
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_next_round(self, interaction: Interaction):
        embed = self.logic.generate_next_round(self.tournament_id)
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_stop_round(self, interaction: Interaction):
        embed = self.logic.get_current_round_embed(self.tournament_id)
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_status_round(self, interaction: Interaction):
                SelectOption(label=f"–ü–æ–±–µ–¥–∞ {match.player_a}", value=f"{match.id}:A"),
                SelectOption(label=f"–ü–æ–±–µ–¥–∞ {match.player_b}", value=f"{match.id}:B"),
                SelectOption(label="–ù–∏—á—å—è", value=f"{match.id}:D"),
        self.next_round_button.custom_id = f"next_round:{tournament_id}"
        self.stop_round_button.custom_id = f"stop_round:{tournament_id}"
        self.status_round_button.custom_id = f"status_round:{tournament_id}"
        self.manage_rounds_button.custom_id = f"manage_rounds:{tournament_id}"

    @button(label="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥", style=ButtonStyle.green, row=0)
    async def start_round_button(self, interaction: Interaction, button: Button):
        # –ü–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π ?startround ‚Äì –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—É –ª—É—á—à–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        embed = self.logic.start_round(self.tournament_id)
        await interaction.response.edit_message(embed=embed, view=self)

    @button(label="‚è≠ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", style=ButtonStyle.blurple, row=0)
    async def next_round_button(self, interaction: Interaction, button: Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å—Ç—å: –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ —É–∂–µ –µ—Å—Ç—å –≤ generate_next_round
        embed = self.logic.generate_next_round(self.tournament_id)
        await interaction.response.edit_message(embed=embed, view=self)

    @button(label="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—É–Ω–¥", style=ButtonStyle.red, row=1)
    async def stop_round_button(self, interaction: Interaction, button: Button):
        # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        embed = self.logic.get_current_round_embed(self.tournament_id)
        await interaction.response.edit_message(embed=embed, view=self)

    @button(label="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", style=ButtonStyle.gray, row=1)
    async def status_round_button(self, interaction: Interaction, button: Button):
        # –ü–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π ?tournamentstatus ‚Äî –º–æ–∂–Ω–æ –ª–∏–±–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É, –ª–∏–±–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ—Ç –∂–µ –≤–∏–¥

        embed = self.logic.get_current_round_embed(self.tournament_id)
        current_matches = self.logic.get_current_matches(self.tournament_id)
        view = MatchResultView(self.tournament_id, self.logic, current_matches)
        await interaction.response.edit_message(embed=embed, view=view)


    async def on_manage_rounds(self, interaction: Interaction):
=======
    @button(label="‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞–º–∏", style=ButtonStyle.primary, row=2)
    async def manage_rounds_button(self, interaction: Interaction, button: Button):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ ‚öô ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞–º–∏.
        """

        await announce_round_management(
            interaction.channel,
            self.tournament_id,
            self.logic,
        )


class MatchResultView(View):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π."""

    def __init__(self, tournament_id: int, logic: Tournament, matches: list):
        super().__init__(timeout=None)
        self.tournament_id = tournament_id
        self.logic = logic

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ –¥–æ–±–∞–≤–ª—è–µ–º select-–º–µ–Ω—é
        for match in matches:
            options = [
                Select.Option(label=f"–ü–æ–±–µ–¥–∞ {match.player_a}", value=f"{match.id}:A"),
                Select.Option(label=f"–ü–æ–±–µ–¥–∞ {match.player_b}", value=f"{match.id}:B"),
                Select.Option(label="–ù–∏—á—å—è", value=f"{match.id}:D")
            ]
            self.add_item(MatchResultSelect(tournament_id, logic, options))

class MatchResultSelect(Select):
    def __init__(self, tournament_id: int, logic: Tournament, options: list):
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥ –º–∞—Ç—á–∞", options=options)
        self.tournament_id = tournament_id
        self.logic = logic

    async def callback(self, interaction: Interaction):
        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä: match_id –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        raw = interaction.values[0]
        match_id_str, result_code = raw.split(':')
        match_id = int(match_id_str)
        # record_result –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Ç—É—Ä–Ω–∏—Ä–æ–º.recordResult ‚Äî —É—á–µ—Å—Ç—å, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏
        embed = self.logic.record_result(self.tournament_id, match_id, result_code)
        await interaction.response.edit_message(embed=embed, view=self.view)

# –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
async def announce_round_management(channel, tournament_id: int, logic: Tournament):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç embed-–ø–æ–¥–ª–æ–∂–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞–º–∏.
    """
    embed = Embed(
        title=f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º #{tournament_id}",
        description=(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—É–Ω–¥–æ–≤.\n"
            "–ù–∞–∂–º–∏—Ç–µ **‚ñ∂Ô∏è** –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞."
        ),
        color=0xF39C12
    )
    view = RoundManagementView(tournament_id, logic)
    await channel.send(embed=embed, view=view)


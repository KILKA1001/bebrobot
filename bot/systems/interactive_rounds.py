import discord
from discord import Embed, Interaction, ButtonStyle, ui
from discord.ui import View, Button
from bot.systems.tournament_logic import (
    start_round as cmd_start_round,
    join_tournament,            # –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    build_tournament_status_embed,
)
from bot.data.tournament_db import record_match_result as db_record_match_result

from bot.systems.tournament_logic import Tournament

class RoundManagementView(View):
    """UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞."""

    persistent = True

    def __init__(self, tournament_id: int, logic: Tournament):
        super().__init__(timeout=None)
        self.tournament_id = tournament_id
        self.logic = logic
        self.custom_id = f"manage_rounds:{tournament_id}"  # –î–æ–±–∞–≤–ª—è–µ–º custom_id

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
        from bot.data.tournament_db import get_tournament_status
        status = get_tournament_status(tournament_id)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥"
        start_disabled = status != "active"
        start_btn = Button(
            label="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥",
            style=ButtonStyle.green,
            custom_id=f"start_round:{tournament_id}",
            row=0,
            disabled=start_disabled
        )
        start_btn.callback = self.on_start_round
        self.add_item(start_btn)

        next_btn = Button(
            label="‚è≠ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É",
            style=ButtonStyle.blurple,
            custom_id=f"next_round:{tournament_id}",
            row=0,
        )
        next_btn.callback = self.on_next_round
        self.add_item(next_btn)

        stop_btn = Button(
            label="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—É–Ω–¥",
            style=ButtonStyle.red,
            custom_id=f"stop_round:{tournament_id}",
            row=1,
        )
        stop_btn.callback = self.on_stop_round
        self.add_item(stop_btn)

        status_btn = Button(
            label="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å",
            style=ButtonStyle.gray,
            custom_id=f"status_round:{tournament_id}",
            row=1,
        )
        status_btn.callback = self.on_status_round
        self.add_item(status_btn)

        # –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞ (–µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "registration")
        if status == "registration":
            activate_btn = Button(
                label="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä",
                style=ButtonStyle.success,
                custom_id=f"activate_tournament:{tournament_id}",
                row=2,
            )
            activate_btn.callback = self.on_activate_tournament
            self.add_item(activate_btn)
        else:
            manage_btn = Button(
                label="‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞–º–∏",
                style=ButtonStyle.primary,
                custom_id=f"manage_rounds:{tournament_id}",
                row=2,
            )
            manage_btn.callback = self.on_manage_rounds
            self.add_item(manage_btn)

    async def on_activate_tournament(self, interaction: Interaction):
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç—É—Ä–Ω–∏—Ä –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
        from bot.systems.tournament_logic import set_tournament_status
        if set_tournament_status(self.tournament_id, "active"):
            await interaction.response.send_message(
                f"‚úÖ –¢—É—Ä–Ω–∏—Ä #{self.tournament_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
                ephemeral=True
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º View
            self.clear_items()
            await self.__init__(self.tournament_id, self.logic)
            await interaction.message.edit(view=self)
        else:
            await interaction.response.send_message(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä",
                ephemeral=True
            )


    async def on_start_round(self, interaction: Interaction):
        await cmd_start_round(interaction, self.tournament_id)

    async def on_next_round(self, interaction: Interaction):
        await cmd_start_round(interaction, self.tournament_id)

    async def on_stop_round(self, interaction: Interaction):
        status = await build_tournament_status_embed(self.tournament_id)
        if status:
            await interaction.response.edit_message(embed=status, view=self)
        else:
            await interaction.response.send_message(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞.", ephemeral=True
            )

    async def on_status_round(self, interaction: Interaction):
        await self.on_stop_round(interaction)

    async def on_manage_rounds(self, interaction: Interaction):
        """–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞–º–∏."""
        embed = Embed(
            title=f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º #{self.tournament_id}",
            description=(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—É–Ω–¥–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ **‚ñ∂Ô∏è** –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞."
            ),
            color=0xF39C12
        )
        view = RoundManagementView(self.tournament_id, self.logic)
        await interaction.response.edit_message(embed=embed, view=view)

class MatchResultView(View):
    """UI –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞."""

    def __init__(self, match_id: int):
        super().__init__(timeout=60)
        self.match_id = match_id

    async def interaction_check(self, interaction: Interaction) -> bool:
        guild = interaction.guild
        if guild is None:
            await interaction.response.send_message(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                ephemeral=True,
            )
            return False

        member = guild.get_member(interaction.user.id)
        if member is None:
            await interaction.response.send_message(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                ephemeral=True,
            )
            return False

        if not member.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–æ–±—â–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞.",
                ephemeral=True,
            )
            return False

        return True

    @ui.button(label="üèÜ –ò–≥—Ä–æ–∫ 1", style=ButtonStyle.primary)
    async def win1(self, interaction: Interaction, button: Button):
        await self._report(interaction, 1)

    @ui.button(label="üèÜ –ò–≥—Ä–æ–∫ 2", style=ButtonStyle.secondary)
    async def win2(self, interaction: Interaction, button: Button):
        await self._report(interaction, 2)

    async def _report(self, interaction: Interaction, winner: int):
        ok = db_record_match_result(self.match_id, winner)
        if ok:
            await interaction.response.edit_message(
                embed=Embed(
                    title=f"–ú–∞—Ç—á #{self.match_id}: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî –∏–≥—Ä–æ–∫ {winner}",
                    color=discord.Color.green(),
                ),
                view=None,
            )
        else:
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
                ephemeral=True,
            )


# –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
async def announce_round_management(channel, tournament_id: int, logic: Tournament):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç embed-–ø–æ–¥–ª–æ–∂–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞–º–∏.
    """
    embed = Embed(
        title=f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º #{tournament_id}",
        description=(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—É–Ω–¥–æ–≤.\n"
            "–ù–∞–∂–º–∏—Ç–µ **‚ñ∂Ô∏è** –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞."
        ),
        color=0xF39C12
    )
    view = RoundManagementView(tournament_id, logic)
    await channel.send(embed=embed, view=view)


import random
import logging
from typing import List, Dict, Optional
import asyncio
import discord
from discord import ui, Embed, ButtonStyle, Color
import os
from bot.data import db
from discord.ext import commands
from discord.abc import Messageable
from discord import TextChannel, Thread, Interaction
import bot.data.tournament_db as tournament_db
from bot.data.players_db import get_player_by_id
from bot.utils import send_temp
from bot.data.tournament_db import count_matches 
from bot.data.tournament_db import (
    add_discord_participant as db_add_participant,
    list_participants as db_list_participants,
    create_matches as db_create_matches,
    record_match_result as db_record_match_result,
    save_tournament_result as db_save_tournament_result,
    update_tournament_status as db_update_tournament_status,
    list_participants_full as db_list_participants_full,
    remove_discord_participant as db_remove_discord_participant,
    remove_player_from_tournament,
    create_tournament_record as db_create_tournament_record,
    get_tournament_info,
    list_recent_results,
    delete_tournament as db_delete_tournament,
)
from bot.systems import tournament_rewards_logic as rewards
from bot.systems.tournament_bank_logic import validate_and_save_bank

logger = logging.getLogger(__name__)





MODE_NAMES: Dict[int, str] = {
    1: "–ù–æ–∫–∞—É—Ç",
    2: "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–∏–º–∫—É",
    3: "–ó–∞—Ö–≤–∞—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤",
    4: "–ë—Ä–æ—É–ª–±–æ–ª",
}
ANNOUNCE_CHANNEL_ID = int(os.getenv("MONTHLY_TOP_CHANNEL_ID", 0))
MODE_IDS = list(MODE_NAMES.keys())

# –ö–∞—Ä—Ç—ã, —Ç–µ–ø–µ—Ä—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É —Ä–µ–∂–∏–º—É
MAPS_BY_MODE: Dict[int, List[str]] = {
    1: ["1.1 1", "1.2 2", "1.3 3"],
    2: ["2.1 4", "2.2 5", "2.3 6"],
    3: ["3.1 7", "3.2 8", "3.3 9"],
    4: ["4.1 10", "4.2 11", "4.3 12"],
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def create_tournament_record(t_type: str, size: int, start_time: Optional[str] = None) -> int:
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –æ —Ç—É—Ä–Ω–∏—Ä–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID."""
    return db_create_tournament_record(t_type, size, start_time)

def set_tournament_status(tournament_id: int, status: str) -> bool:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ (registration/active/finished).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
    """
    return db_update_tournament_status(tournament_id, status)

def delete_tournament_record(tournament_id: int) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç —Ç—É—Ä–Ω–∏—Ä –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –∑–∞–ø–∏—Å–∏ (ON DELETE CASCADE).
    """
    try:
        db_delete_tournament(tournament_id)
        return True
    except Exception:
        return False


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–æ–º–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

class Match:
    def __init__(self, player1_id: int, player2_id: int, mode_id: int, map_id: str):
        self.player1_id = player1_id
        self.player2_id = player2_id
        self.mode_id = mode_id      # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ–≤–æ–π ID
        self.map_id = map_id
        self.result: Optional[int] = None
        self.match_id: Optional[int] = None
        self.bank_type: Optional[int] = None
        self.manual_amount: Optional[float] = None

class Tournament:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–æ–π —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–µ (–Ω–µ –≤ –ë–î).
    """
    def __init__(self,
         participants: List[int],
         modes: List[int],                  # —Ç–µ–ø–µ—Ä—å —ç—Ç–æ MODE_IDS
         maps_by_mode: Dict[int, List[str]] # –∫–ª—é—á–∏ ‚Äî —Ç–µ –∂–µ ID
    ):
        self.participants = participants.copy()
        self.modes = modes
        self.maps_by_mode = maps_by_mode
        self.current_round = 1
        self.matches: Dict[int, List[Match]] = {}

    def generate_round(self) -> List[Match]:
        random.shuffle(self.participants)
        round_matches: List[Match] = []
        for i in range(0, len(self.participants), 2):
            p1, p2 = self.participants[i], self.participants[i + 1]
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
            picked = self.modes[:3]
            for mode_id in picked:
                map_list = self.maps_by_mode.get(mode_id, [])
                map_choice = random.choice(map_list) if map_list else ""
                round_matches.append(Match(p1, p2, mode_id, map_choice))
        self.matches[self.current_round] = round_matches
        self.current_round += 1
        return round_matches

    def record_result(self, round_number: int, match_index: int, winner: int):
        try:
            match = self.matches[round_number][match_index]
            match.result = winner
        except Exception:
            raise IndexError("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞—É–Ω–¥–µ")

    def get_winners(self, round_number: int) -> List[int]:
        winners: List[int] = []
        for m in self.matches.get(round_number, []):
            if m.result == 1:
                winners.append(m.player1_id)
            elif m.result == 2:
                winners.append(m.player2_id)
        return winners

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∏ –∫–∞—Ä—Ç—ã
MODES = ["—Ä–µ–∂–∏–º1", "—Ä–µ–∂–∏–º2", "—Ä–µ–∂–∏–º3", "—Ä–µ–∂–∏–º4"]
MAPS = {
    "—Ä–µ–∂–∏–º1": ["1.1 1", "1.2 2", "1.3 3"],
    "—Ä–µ–∂–∏–º2": ["2.1 4", "2.2 5", "2.3 6"],
    "—Ä–µ–∂–∏–º3": ["3.1 7", "3.2 8", "3.3 9"],
    "—Ä–µ–∂–∏–º4": ["4.1 10", "4.2 11", "4.3 12"],
}

def create_tournament_object(participants: List[int]) -> Tournament:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–µ (–±–µ–∑ –ë–î) –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Tournament —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
    """
    return Tournament(participants, MODE_IDS, MAPS_BY_MODE)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

class TournamentSetupView(ui.View):
    """
    –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π UI: –≤—ã–±–æ—Ä —Ç–∏–ø–∞, —Ä–∞–∑–º–µ—Ä–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î.
    """
    def __init__(self, author_id: int):
        super().__init__(timeout=120)
        self.author_id = author_id
        self.manual_amount = 0.0
        self.t_type: Optional[str] = None
        self.size:   Optional[int] = None
        self.bank_type: Optional[int] = None
        self.start_time: Optional[str] = None
        self.message: Optional[discord.Message] = None
        self._build_type_buttons()
        
        

    @staticmethod
    def initial_embed() -> discord.Embed:
        return discord.Embed(
            title="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞",
            description="–í—ã–±–µ—Ä–∏—Ç–µ **—Ç–∏–ø** —Ç—É—Ä–Ω–∏—Ä–∞:",
            color=discord.Color.gold()
        )
    def disable_all_items(self) -> None:
        """
        –û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ (–¥–µ–ª–∞–µ—Ç –∏—Ö disabled=True),
        —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –Ω–∞–∂–∞—Ç–∏–π.
        """
        for item in self.children:
            if isinstance(item, ui.Button):
                item.disabled = True
        
    def _build_type_buttons(self):
        self.clear_items()
        # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –î—É—ç–ª—å
        btn1 = ui.Button(
            label="–î—É—ç–ª—å–Ω—ã–π 1√ó1",
            style=discord.ButtonStyle.primary,
            custom_id="type_duel"
        )
        # –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ—ë –∫–æ–ª–±—ç–∫
        btn1.callback = self.on_type_duel
        self.add_item(btn1)

        # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –ö–æ–º–∞–Ω–¥–Ω—ã–π
        btn2 = ui.Button(
            label="–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3",
            style=discord.ButtonStyle.primary,
            custom_id="type_team"
        )
        btn2.callback = self.on_type_team
        self.add_item(btn2)

    def _build_size_buttons(self):
        self.clear_items()
        # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        choices = [4, 8, 16] if self.t_type == "duel" else [6, 12, 24]
        for n in choices:
            btn = ui.Button(label=str(n),
style=discord.ButtonStyle.secondary,
            custom_id=f"size_{n}")
            # –≤–µ—à–∞–µ–º callback, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ interaction
            btn.callback = self.on_size
            self.add_item(btn)

    def _build_bank_type_selector(self):
        self.clear_items()

        select = ui.Select(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –±–∞–Ω–∫–∞ –Ω–∞–≥—Ä–∞–¥",
            options=[
                discord.SelectOption(label="–¢–∏–ø 1 ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value="1", description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞—Ç–∏—Ç 50% (–º–∏–Ω. 15 –±–∞–ª–ª–æ–≤)"),
                discord.SelectOption(label="–¢–∏–ø 2 ‚Äî –°–º–µ—à–∞–Ω–Ω—ã–π", value="2", description="25% –ø–ª–∞—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, 75% ‚Äî –±–∞–Ω–∫ –ë–µ–±—Ä"),
                discord.SelectOption(label="–¢–∏–ø 3 ‚Äî –ö–ª—É–±", value="3", description="100% –∏–∑ –±–∞–Ω–∫–∞ –ë–µ–±—Ä"),
                discord.SelectOption(label="üß™ TEST ‚Äî –ë–µ–∑ –Ω–∞–≥—Ä–∞–¥ (—Ç–µ—Å—Ç)", value="4", description="–ù–∏–∫–∞–∫–∏—Ö –≤—ã–ø–ª–∞—Ç –∏ —Å–ø–∏—Å–∞–Ω–∏–π, —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            ],
            custom_id="bank_type"
        )
        select.callback = self.on_select_bank_type
        self.add_item(select)

    def _build_confirm_buttons(self):
        self.clear_items()
        date_btn = ui.Button(
            label="üìÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞",
            style=discord.ButtonStyle.secondary,
            custom_id="set_date"
        )
        date_btn.callback = self.on_set_date
        self.add_item(date_btn)
        # –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª
        btn_confirm = ui.Button(
            label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            style=discord.ButtonStyle.success,
            custom_id="confirm"
        )
        btn_confirm.callback = self.on_confirm
        self.add_item(btn_confirm)

        # –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª
        btn_cancel = ui.Button(
            label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            style=discord.ButtonStyle.danger,
            custom_id="cancel"
        )
        btn_cancel.callback = self.on_cancel
        self.add_item(btn_cancel)

    async def on_set_date(self, interaction: discord.Interaction):
        await interaction.response.send_modal(StartDateModal(self))

    async def interaction_check(self, inter: discord.Interaction) -> bool:
        # –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º View
        return inter.user.id == self.author_id

    async def on_type_duel(self, interaction: discord.Interaction):
        self.t_type = "duel"
        embed = discord.Embed(
            title="–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞",
            description="üèÜ **–î—É—ç–ª—å–Ω—ã–π 1√ó1**\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ **–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**:",
            color=discord.Color.gold()
        )
        self._build_size_buttons()
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_type_team(self, interaction: discord.Interaction):
        self.t_type = "team"
        embed = discord.Embed(
            title="–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞",
            description="ü§ù **–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3**\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ **–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**:",
            color=discord.Color.gold()
        )
        self._build_size_buttons()
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_select_bank_type(self, interaction: discord.Interaction):
        data = interaction.data or {}
        selected = data.get("values", ["1"])[0]
        self.bank_type = int(selected)

        embed = discord.Embed(
            title="–ò—Å—Ç–æ—á–Ω–∏–∫ –±–∞–Ω–∫–∞ –Ω–∞–≥—Ä–∞–¥ –≤—ã–±—Ä–∞–Ω",
            description=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø: **{self.bank_type}**",
            color=discord.Color.blue()
        )

        # –¢–∏–ø 1 —Ç—Ä–µ–±—É–µ—Ç —Å—É–º–º—É
        if self.bank_type == 1:
            embed.add_field(name="‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É", value="–ú–∏–Ω. 15 –±–∞–ª–ª–æ–≤", inline=False)
            await interaction.response.send_modal(BankAmountModal(self))
        else:
            embed = discord.Embed(
                title="–ò—Å—Ç–æ—á–Ω–∏–∫ –±–∞–Ω–∫–∞ –Ω–∞–≥—Ä–∞–¥ –≤—ã–±—Ä–∞–Ω",
                description=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø: **{self.bank_type}**",
                color=discord.Color.blue()
            )
            self._build_confirm_buttons()
            await interaction.response.edit_message(embed=embed, view=self)

    async def on_size(self, interaction: discord.Interaction):
        # –¥–æ—Å—Ç–∞—ë–º custom_id –∏–∑ payload –∏ –ø–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
        data = interaction.data or {}
        cid = data.get("custom_id", "")
        try:
            self.size = int(cid.split("_", 1)[1])
        except (IndexError, ValueError):
            # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return
        type_name = "–î—É—ç–ª—å–Ω—ã–π 1√ó1" if self.t_type == "duel" else "–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3"
        embed = discord.Embed(
            title="–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞",
            description=(
                f"üèÜ **–¢–∏–ø:** {type_name}\n"
                f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {self.size}\n\n"
                "–ù–∞–∂–º–∏—Ç–µ **‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å** –∏–ª–∏ **‚ùå –û—Ç–º–µ–Ω–∏—Ç—å**"
            ),
            color=discord.Color.gold()
        )
        self._build_confirm_buttons()
        self._build_bank_type_selector()
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_confirm(self, interaction: discord.Interaction):
        try:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª –∏ —Ç–∏–ø, –∏ —Ä–∞–∑–º–µ—Ä
            if self.t_type is None or self.size is None:
                # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–º—É–¥—Ä–∏–ª—Å—è –Ω–∞–∂–∞—Ç—å ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
                    await interaction.response.send_message(
                        "‚ùå –û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", 
                        ephemeral=True
                    )
                    return

            if self.start_time is None:
                await interaction.response.send_message(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"üìÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞\".",
                    ephemeral=True,
                )
                return

            # –¢–µ–ø–µ—Ä—å —Ç–∏–ø –∏ —Ä–∞–∑–º–µ—Ä ‚Äî —Ç–æ—á–Ω–æ str –∏ int
            tour_id = create_tournament_record(self.t_type, self.size, self.start_time)
            ok, msg = validate_and_save_bank(tour_id, self.bank_type or 1, self.manual_amount)
            if not ok:
                await interaction.response.send_message(msg, ephemeral=True)
                return
            typetxt = "–î—É—ç–ª—å–Ω—ã–π 1√ó1" if self.t_type == "duel" else "–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3"
            prize_text = {
                1: f"üèÖ –¢–∏–ø 1 ‚Äî {self.manual_amount:.2f} –±–∞–ª–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                2: "ü•à –¢–∏–ø 2 ‚Äî 30 –±–∞–ª–ª–æ–≤ (25% –ø–ª–∞—Ç–∏—Ç –∏–≥—Ä–æ–∫)",
                3: "ü•á –¢–∏–ø 3 ‚Äî 30 –±–∞–ª–ª–æ–≤ (–∏–∑ –±–∞–Ω–∫–∞ –ë–µ–±—Ä)",
                4: "üõ†Ô∏è TEST ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –Ω–∞–≥—Ä–∞–¥—ã –Ω–µ –≤—ã–¥–∞—é—Ç—Å—è"
            }.get(self.bank_type or 1, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            embed = discord.Embed(
                title=f"‚úÖ –¢—É—Ä–Ω–∏—Ä #{tour_id} —Å–æ–∑–¥–∞–Ω!",
                description=(
                    f"üèÜ –¢–∏–ø: {'–î—É—ç–ª—å–Ω—ã–π 1√ó1' if self.t_type=='duel' else '–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3'}\n"
                    f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {self.size}\n"
                    f"üéÅ –ü—Ä–∏–∑: {prize_text}\n"
                    f"ID —Ç—É—Ä–Ω–∏—Ä–∞: **{tour_id}**"
                ),
                color=discord.Color.green()
            )
            self.disable_all_items()
            await interaction.response.edit_message(embed=embed, view=self)
            announcement = discord.Embed(
                title=f"üì£ –û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî –¢—É—Ä–Ω–∏—Ä #{tour_id}",
                color=discord.Color.gold()
            )
            # —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞
            announcement.add_field(name="–¢–∏–ø", value=typetxt, inline=True)
            announcement.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=str(self.size), inline=True)
            announcement.add_field(name="–ü—Ä–∏–∑", value=prize_text, inline=False)
            if self.start_time:
                announcement.add_field(name="–ù–∞—á–∞–ª–æ", value=self.start_time, inline=False)
            announcement.set_footer(text="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            # –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥–∞
            # (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä reward –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ª–∏–±–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)

            # –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –Ω–∞—à—É RegistrationView
            reg_view = RegistrationView(tournament_id=tour_id, max_participants=self.size, tour_type=typetxt)

            # –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞–º–∏
            reg_view.add_item(
                discord.ui.Button(
                    label="‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞–º–∏",
                    style=ButtonStyle.primary,
                    custom_id=f"manage_rounds:{tour_id}"
                )
            )
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª, –≥–¥–µ –±—ã–ª setup
            guild = interaction.guild
            if guild:
                chan = guild.get_channel(ANNOUNCE_CHANNEL_ID)
                if isinstance(chan, (TextChannel, Thread)):
                    sent = await chan.send(embed=announcement, view=reg_view)
                        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º sent.id –≤–º–µ—Å—Ç–µ —Å tour_id –≤ –ë–î
                    tournament_db.save_announcement_message(tournament_id=tour_id, message_id=sent.id)
                    return

            # fallback –Ω–∞ —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
            msg = interaction.message
            if msg and isinstance(msg.channel, (TextChannel, Thread, Messageable)):
                await msg.channel.send(embed=announcement, view=reg_view)
            else:
            # –≤ —Å–∞–º–æ–º –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º interaction.response
                await interaction.response.send_message(embed=announcement, view=reg_view)
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: `{e}`",
                ephemeral=True
            )
            import traceback
            logger.error("–û—à–∏–±–∫–∞ –≤ on_confirm:\n%s", traceback.format_exc())

        
    async def on_cancel(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            color=discord.Color.red()
        )
        self.disable_all_items()
        await interaction.response.edit_message(embed=embed, view=self)


async def start_round_logic(ctx: commands.Context, tournament_id: int) -> None:
    # 0) –ü–æ–ª—É—á–∞–µ–º ¬´—Å—ã—Ä—ã–µ¬ª –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    raw = db_list_participants_full(tournament_id)
    if not raw:
        await send_temp(ctx, f"‚ùå –¢—É—Ä–Ω–∏—Ä #{tournament_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤ –Ω—ë–º –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    # ‚îÄ‚îÄ‚îÄ –§–æ—Ä–º–∏—Ä—É–µ–º participants –∏ display_map ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    participants: list[int] = []
    display_map: dict[int, str] = {}

    for entry in raw:
        d = entry.get("discord_user_id")
        p = entry.get("player_id")
        if d is not None:
            participants.append(d)
            display_map[d] = f"<@{d}>"
        elif p is not None:
            participants.append(p)
            pl = get_player_by_id(p)
            display_map[p] = pl["nick"] if pl else f"–ò–≥—Ä–æ–∫#{p}"
        else:
        # –ù–∏ —Ç–æ–≥–æ –Ω–∏ –¥—Ä—É–≥–æ–≥–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
            continue
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 1) –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if len(participants) < 2:
        await send_temp(ctx, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")
        return
    # –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—ë—Ç–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if len(participants) % 2 != 0:
        await send_temp(ctx, "‚ö†Ô∏è –ù–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî –Ω—É–∂–Ω–æ —á—ë—Ç–Ω–æ–µ –¥–ª—è –ø–∞—Ä.")
        return

    from bot.commands.tournament import active_tournaments
    tour = active_tournaments.get(tournament_id)
    if tour is None:
        tour = create_tournament_logic(participants)
        active_tournaments[tournament_id] = tour
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        if tour.current_round > 1:
            res = _get_round_results(tournament_id, tour.current_round - 1)
            if res is None:
                await send_temp(ctx, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.")
                return
            winners, _losers = res
            _sync_participants_after_round(tournament_id, winners)
            tour.participants = winners
            participants = winners
            if len(participants) < 2:
                await send_temp(ctx, f"üèÜ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî <@{participants[0]}>.")
                db_update_tournament_status(tournament_id, "finished")
                return
    
    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥–∏–ª—å–¥–∏–∏
    guild = ctx.guild
    if guild is None:
        await send_temp(ctx, "‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    matches = tour.generate_round()
    round_number = tour.current_round - 1

    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db_create_matches(tournament_id, round_number, matches)

    # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed
    embed = Embed(
        title=f"–†–∞—É–Ω–¥ {round_number} ‚Äî –¢—É—Ä–Ω–∏—Ä #{tournament_id}",
        description=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π:",
        color=discord.Color.blurple()
    )
    for idx, m in enumerate(matches, start=1):
        v1 = display_map.get(m.player1_id, f"<@{m.player1_id}>")
        v2 = display_map.get(m.player2_id, f"<@{m.player2_id}>")
        mode_name = MODE_NAMES.get(m.mode_id, str(m.mode_id))
        embed.add_field(
            name=f"–ú–∞—Ç—á {idx}",
            value=(
                f"{v1} vs {v2}\n"
                f"**–†–µ–∂–∏–º:** {mode_name}\n"
                f"**–ö–∞—Ä—Ç–∞:** {m.map_id}"
            ),
            inline=False
        )

    await send_temp(ctx, embed=embed)


def create_tournament_logic(participants: List[int]) -> Tournament:
    return Tournament(participants, MODE_IDS, MAPS_BY_MODE)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _get_round_results(tournament_id: int, round_no: int) -> Optional[tuple[list[int], list[int]]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞.

    –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞—Ç—á –Ω–µ –∏–º–µ–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è ``None``.
    """
    matches = tournament_db.get_matches(tournament_id, round_no)
    winners: list[int] = []
    losers: list[int] = []
    for m in matches:
        res = m.get("result")
        if res not in (1, 2):
            return None
        if res == 1:
            winners.append(m["player1_id"])
            losers.append(m["player2_id"])
        else:
            winners.append(m["player2_id"])
            losers.append(m["player1_id"])
    return winners, losers


def _sync_participants_after_round(tournament_id: int, winners: list[int]) -> None:
    """–£–¥–∞–ª—è–µ—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å–µ—Ö, –∫—Ç–æ –Ω–µ –≤–æ—à—ë–ª –≤ —Å–ø–∏—Å–æ–∫ ``winners``."""
    current = db_list_participants_full(tournament_id)
    for entry in current:
        disc_id = entry.get("discord_user_id")
        player_id = entry.get("player_id")
        pid = disc_id or player_id
        if pid not in winners:
            if disc_id is not None:
                remove_discord_participant(tournament_id, disc_id)
            if player_id is not None:
                remove_player_from_tournament(player_id, tournament_id)

async def join_tournament(ctx: commands.Context, tournament_id: int) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ —á–µ—Ä–µ–∑ –∑–∞–ø–∏—Å—å –≤ –ë–î
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∫–∞–Ω–∞–ª.
    """
    ok = db_add_participant(tournament_id, ctx.author.id)
    if ok:
        await send_temp(ctx, f"‚úÖ {ctx.author.mention}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ #{tournament_id}")
    else:
        await send_temp(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è "
            "(–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ —Ç—É—Ä–Ω–∏—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)."
        )

async def start_round(interaction: Interaction, tournament_id: int) -> None:
    """
    1) –ë–µ—Ä—ë—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    2) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Ö >=2 –∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥–∏–ª—å–¥–∏–∏
    3) –°–æ–∑–¥–∞—ë—Ç/–¥–æ—Å—Ç–∞—ë—Ç –æ–±—ä–µ–∫—Ç Tournament
    4) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—É–Ω–¥, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
    5) –°—Ç—Ä–æ–∏—Ç Embed –∏ —à–ª—ë—Ç –≤ –∫–∞–Ω–∞–ª
    """
    from bot.systems.interactive_rounds import MatchResultView, PairSelectionView
    # 1) –£—á–∞—Å—Ç–Ω–∏–∫–∏
    raw_participants = db_list_participants(tournament_id)
    if len(raw_participants) < 2:
        await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")
        return

    if len(raw_participants) % 2 != 0:
        await interaction.response.send_message("‚ö†Ô∏è –ù–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî –Ω—É–∂–Ω–æ —á—ë—Ç–Ω–æ–µ –¥–ª—è –ø–∞—Ä.")
        return

    participants = [p.get("discord_user_id") or p.get("player_id") for p in raw_participants]
    
    # 2) –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    guild = interaction.guild
    if guild is None:
        await interaction.response.send_message("‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    # 3) –û–±—ä–µ–∫—Ç —Ç—É—Ä–Ω–∏—Ä–∞
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π View –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    view = None
    for v in interaction.client.persistent_views:
        if hasattr(v, 'custom_id') and v.custom_id == f"manage_rounds:{tournament_id}":
            view = v
            break

    if view and hasattr(view, 'logic'):
        tour = view.logic
    else:
        tour = create_tournament_logic(participants)

    # 3a) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    if tour.current_round > 1:
        res = _get_round_results(tournament_id, tour.current_round - 1)
        if res is None:
            await interaction.response.send_message(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–Ω–µ—Å–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.", ephemeral=True
            )
            return
        winners, _losers = res
        _sync_participants_after_round(tournament_id, winners)
        tour.participants = winners
        participants = winners
        if len(participants) < 2:
            await interaction.response.send_message(
                f"üèÜ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî <@{participants[0]}>."
                if participants else "–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω."
            )
            db_update_tournament_status(tournament_id, "finished")
            return

    # 4) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∑–∞–ø–∏—Å—å
    matches = tour.generate_round()
    round_no = tour.current_round - 1
    db_create_matches(tournament_id, round_no, matches)

    pairs: dict[int, list[Match]] = {}
    step = len(tour.modes[:3])
    pid = 1
    for i in range(0, len(matches), step):
        pairs[pid] = matches[i:i + step]
        pid += 1

    embed = discord.Embed(
        title=f"–†–∞—É–Ω–¥ {round_no} ‚Äî –≤—ã–±–æ—Ä –ø–∞—Ä—ã",
        description="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–∞—Ç—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã.",
        color=discord.Color.orange(),
    )
    view_pairs = PairSelectionView(tournament_id, pairs, guild, round_no)
    await interaction.response.send_message(embed=embed, view=view_pairs)

async def report_result(ctx: commands.Context, match_id: int, winner: int) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É ?reportresult:
     1) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ winner == 1 –∏–ª–∏ 2
     2) –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ë–î —á–µ—Ä–µ–∑ db_record_match_result
     3) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ
    """
    if winner not in (1, 2):
        await send_temp(ctx, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: 1 (player1) –∏–ª–∏ 2 (player2).")
        return

    ok = db_record_match_result(match_id, winner)
    if ok:
        await send_temp(ctx, f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ #{match_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî –∏–≥—Ä–æ–∫ {winner}.")
    else:
        await send_temp(ctx, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –º–∞—Ç—á–∞.")

async def show_status(
    ctx: commands.Context,
    tournament_id: int,
    round_number: Optional[int] = None
) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞—É–Ω–¥.
    """
    # –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    if round_number is None:
        participants = db_list_participants_full(tournament_id)
        tour = ctx.bot.get_cog("TournamentCog").active_tournaments.get(tournament_id)
        last_round = (tour.current_round - 1) if tour else 0
        await send_temp(
            f"üèü –¢—É—Ä–Ω–∏—Ä #{tournament_id}: —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {len(participants)}, "
            f"–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥ {last_round}"
        )
        return

    # –¥–µ—Ç–∞–ª—å–Ω–æ –ø–æ —Ä–∞—É–Ω–¥—É
    data = tournament_db.get_matches(tournament_id, round_number)
    matches = []
    for r in data:
        m = Match(r["player1_id"], r["player2_id"], r["mode"], r["map_id"])
        m.result = r.get("result")
        matches.append(m)
    if not matches:
        await send_temp(ctx, f"‚ùå –†–∞—É–Ω–¥ {round_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    embed = Embed(
        title=f"üìã –¢—É—Ä–Ω–∏—Ä #{tournament_id} ‚Äî –†–∞—É–Ω–¥ {round_number}",
        color=discord.Color.green()
    )
    guild = ctx.guild
    for idx, m in enumerate(matches, start=1):
        status = (
            "‚è≥" if m.result is None
            else ("üèÜ 1" if m.result == 1 else "üèÜ 2")
        )
        mode_name = MODE_NAMES.get(m.mode_id, str(m.mode_id))
        # —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
        if guild:
            p1 = guild.get_member(m.player1_id)
            p2 = guild.get_member(m.player2_id)
            v1 = p1.mention if p1 else f"<@{m.player1_id}>"
            v2 = p2.mention if p2 else f"<@{m.player2_id}>"
        else:
            v1 = f"<@{m.player1_id}>"
            v2 = f"<@{m.player2_id}>"

        embed.add_field(
            name=f"–ú–∞—Ç—á {idx} {status}",
            value=(
                f"{v1} vs {v2}\n"
                f"**–†–µ–∂–∏–º:** {mode_name}\n"
                f"**–ö–∞—Ä—Ç–∞:** `{m.map_id}`"
            ),
            inline=False
        )

    await send_temp(ctx, embed=embed)

async def end_tournament(
    ctx: commands.Context,
    tournament_id: int,
    first: int,
    second: int,
    third: Optional[int] = None
) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä:
     1) –§–æ—Ä–º–∏—Ä—É–µ—Ç –±–∞–Ω–∫ —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–∏–ø 1 ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ)
     2) –°–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã —Å –∏–≥—Ä–æ–∫–∞/–±–∞–Ω–∫–∞
     3) –ù–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã
     4) –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –±–∞–Ω–∫–∞ –∏ —Å—É–º–º—É
    info = get_tournament_info(tournament_id) or {}

    bank_type = info.get("bank_type", 1)
    manual_amount = info.get("manual_amount", 20.0)

    user_balance = db.scores.get(ctx.author.id, 0.0)

    try:
        bank_total, user_part, bank_part = rewards.calculate_bank(bank_type, user_balance, manual_amount)
    except ValueError as e:
        await send_temp(ctx, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    # üîπ –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ / –±–∞–Ω–∫–∞
    success = rewards.charge_bank_contribution(
        user_id=ctx.author.id,
        user_amount=user_part,
        bank_amount=bank_part,
        reason=f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ #{tournament_id}"
    )
    if not success:
        await send_temp(ctx, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—à–∏–±–∫–∞ –±–∞–Ω–∫–∞.")
        return

    # üîπ –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
    all_participants = db_list_participants(tournament_id)

    def resolve_team(place_id: int):
        return [
            p["discord_user_id"] or p["player_id"]
            for p in all_participants
            if (p["discord_user_id"] == place_id or p["player_id"] == place_id)
        ]

    first_team = resolve_team(first)
    second_team = resolve_team(second)

    # üîπ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
    rewards.distribute_rewards(
        tournament_id=tournament_id,
        bank_total=bank_total,
        first_team_ids=first_team,
        second_team_ids=second_team,
        author_id=ctx.author.id
    )

    # üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    ok1 = db_save_tournament_result(tournament_id, first, second, third)
    ok2 = db_update_tournament_status(tournament_id, "finished")

    if ok1 and ok2:
        await send_temp(
            f"üèÅ –¢—É—Ä–Ω–∏—Ä #{tournament_id} –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –Ω–∞–≥—Ä–∞–¥—ã –≤—ã–¥–∞–Ω—ã:\n"
            f"ü•á {first} (x{len(first_team)})\n"
            f"ü•à {second} (x{len(second_team)})" +
            (f"\nü•â {third}" if third is not None else "")
        )
    else:
        await send_temp(ctx, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")

class ConfirmDeleteView(ui.View):
    def __init__(self, tournament_id: int):
        super().__init__(timeout=60)
        self.tid = tournament_id

    @ui.button(label="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", style=discord.ButtonStyle.danger)
    async def confirm(self, interaction: discord.Interaction, button: ui.Button):
        ok = delete_tournament_record(self.tid)
        if ok:
            await interaction.response.edit_message(
                embed=Embed(
                    title=f"‚úÖ –¢—É—Ä–Ω–∏—Ä #{self.tid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω",
                    color=discord.Color.green()
                ),
                view=None
            )
        else:
            await interaction.response.edit_message(
                embed=Embed(
                    title="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.",
                    color=discord.Color.red()
                ),
                view=None
            )

async def delete_tournament(
    ctx: commands.Context,
    tournament_id: int
) -> None:
    """
    –®–ª—ë—Ç embed —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞.
    –°–∞–º–æ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ –∫–ª–∏–∫—É –∫–Ω–æ–ø–∫–∏.
    """
    embed = Embed(
        title=f"‚ùó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ #{tournament_id}",
        description="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ **–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ**.",
        color=discord.Color.red()
    )
    view = ConfirmDeleteView(tournament_id)
    await send_temp(ctx, embed=embed, view=view)


async def show_history(ctx: commands.Context, limit: int = 10) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ `limit` –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    –≤–º–µ—Å—Ç–µ —Å –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    """
    rows = list_recent_results(limit)
    if not rows:
        await send_temp(ctx, "üì≠ –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        return

    embed = Embed(
        title="üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤",
        color=discord.Color.teal()
    )

    for r in rows:
        tid = r["tournament_id"]
        first = r["first_place_id"]
        second = r["second_place_id"]
        third = r.get("third_place_id")

        # --- –ù–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---
        participants = db_list_participants(tid)       # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç List[int]
        total_participants = len(participants)

        total_matches = count_matches(tid)          # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int

        places_line = f"ü•á {first}  ü•à {second}" + (f"  ü•â {third}" if third else "")
        stats_line = (
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_participants}\n"
            f"üé≤ –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: {total_matches}\n"
            f"‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ: `?tournamentstatus {tid}`"
        )

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–Ω–æ –ø–æ–ª–µ
        embed.add_field(
            name=f"–¢—É—Ä–Ω–∏—Ä #{tid}",
            value=f"{places_line}\n\n{stats_line}",
            inline=False
        )

    await send_temp(ctx, embed=embed)

class RegistrationView(ui.View):
    persistent = True
    def __init__(self, tournament_id: int, max_participants: int, tour_type: Optional[str] = None):
        super().__init__(timeout=None)
        self.tid = tournament_id
        self.max = max_participants
        self.tour_type = tour_type
        self._build_button()

    def _build_button(self):
        self.clear_items()
        raw = db_list_participants_full(self.tid)
        current = len(raw)
        btn = ui.Button(
            label=f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ({current}/{self.max})",
            style=discord.ButtonStyle.primary,
            custom_id=f"register_{self.tid}"
        )
        btn.callback = self.register
        btn.disabled = current >= self.max
        self.add_item(btn)

    async def register(self, interaction: discord.Interaction):
        ok = db_add_participant(self.tid, interaction.user.id)
        if not ok:
            return await interaction.response.send_message(
                "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ —Ç—É—Ä–Ω–∏—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", ephemeral=True
            )
        # –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        await interaction.response.send_message(
            f"‚úÖ {interaction.user.mention}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ #{self.tid}.", ephemeral=True
        )
        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        self._build_button()
        assert interaction.message is not None, "interaction.message –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None"
        await interaction.message.edit(view=self)

        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º 1-–π —Ä–∞—É–Ω–¥
        raw = db_list_participants_full(self.tid)
        if len(raw) >= self.max:
            from bot.systems.interactive_rounds import RoundManagementView
            from bot.data.tournament_db import create_matches as db_create_matches

            # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –ª–æ–≥–∏–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
            ids = [p.get("discord_user_id") or p.get("player_id") for p in raw]
            logic = create_tournament_logic(ids)
            matches = logic.generate_round()
            db_create_matches(self.tid, 1, matches)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É
            bracket = await build_tournament_bracket_embed(self.tid, interaction.guild)
            view = RoundManagementView(self.tid, logic)
            await interaction.message.edit(embed=bracket, view=view)
        
async def announce_tournament(
    ctx: commands.Context,
    tournament_id: int,
    tour_type: str,
    max_participants: int,
    reward: Optional[str] = None
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–∞–Ω–∞–ª Embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—É—Ä–Ω–∏—Ä–µ –∏ –∫–Ω–æ–ø–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    embed = Embed(
        title=f"üì£ –û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî –¢—É—Ä–Ω–∏—Ä #{tournament_id}",
        color=discord.Color.gold()
    )
    embed.add_field(name="–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞", value=tour_type, inline=True)
    embed.add_field(name="–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=str(max_participants), inline=True)
    if reward:
        embed.add_field(name="–ü—Ä–∏–∑", value=reward, inline=False)
    embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")

    view = RegistrationView(tournament_id, max_participants)
    await send_temp(ctx, embed=embed, view=view)

async def handle_jointournament(ctx: commands.Context, tournament_id: int):
    ok = db_add_participant(tournament_id, ctx.author.id)
    if not ok:
        return await send_temp(ctx, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ).")
    await send_temp(ctx, f"‚úÖ <@{ctx.author.id}> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ç—É—Ä–Ω–∏—Ä–µ #{tournament_id}.")
    # —Ç—É—Ç –º–æ–∂–Ω–æ –µ—â—ë –æ–±–Ω–æ–≤–∏—Ç—å RegistrationView, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

async def handle_regplayer(ctx: commands.Context, player_id: int, tournament_id: int):
    ok = db_add_participant(tournament_id, player_id)
    if not ok:
        return await send_temp(ctx, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞.")
    pl = get_player_by_id(player_id)
    name = pl["nick"] if pl else f"–ò–≥—Ä–æ–∫#{player_id}"
    await send_temp(ctx, f"‚úÖ {name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ç—É—Ä–Ω–∏—Ä–µ #{tournament_id}.")

async def handle_unregister(ctx: commands.Context, identifier: str, tournament_id: int):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    if identifier.startswith("<@") and identifier.endswith(">"):
        uid = int(identifier.strip("<@!>"))
        ok = db_remove_discord_participant(tournament_id, uid)
        name = f"<@{uid}>"
    else:
        pid = int(identifier)
        ok = remove_player_from_tournament(pid, tournament_id)
        pl = get_player_by_id(pid)
        name = pl["nick"] if pl else f"–ò–≥—Ä–æ–∫#{pid}"

    if not ok:
        return await send_temp(ctx, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Å —Ç—É—Ä–Ω–∏—Ä–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ).")
    await send_temp(ctx, f"‚úÖ {name} —É–¥–∞–ª—ë–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ #{tournament_id}.")

class StartDateModal(ui.Modal, title="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞"):
    start = ui.TextInput(label="–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú", placeholder="01.12.2023 18:00", required=True)

    def __init__(self, view: TournamentSetupView):
        super().__init__()
        self.view = view

    async def on_submit(self, interaction: discord.Interaction):
        from datetime import datetime
        try:
            dt = datetime.strptime(str(self.start), "%d.%m.%Y %H:%M")
            self.view.start_time = dt.isoformat()
            await interaction.response.send_message(
                f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {dt.strftime('%d.%m.%Y %H:%M')}",
                ephemeral=True,
            )
            if self.view.message:
                self.view._build_confirm_buttons()
                await self.view.message.edit(view=self.view)
        except Exception:
            await interaction.response.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú", ephemeral=True
            )


class BankAmountModal(ui.Modal, title="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∞–Ω–∫–∞"):
    amount = ui.TextInput(label="–°—É–º–º–∞ (–º–∏–Ω–∏–º—É–º 15)", placeholder="20", required=True)

    def __init__(self, view: TournamentSetupView):
        super().__init__()
        self.view = view

    async def on_submit(self, interaction: discord.Interaction):
        try:
            value = float(self.amount.value.replace(",", "."))
            if value < 15:
                raise ValueError("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ")
            self.view.manual_amount = value
            await interaction.response.send_message(f"‚úÖ –°—É–º–º–∞ –±–∞–Ω–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: **{value:.2f}**", ephemeral=True)
        except Exception:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω. 15)", ephemeral=True)

async def send_announcement_embed(ctx, tournament_id: int) -> bool:
    data = get_tournament_info(tournament_id)
    if not data:
        return False

    from bot.data.tournament_db import list_participants_full as db_list_participants_full

    t_type = data["type"]
    size = data["size"]
    bank_type = data.get("bank_type", 1)
    manual = data.get("manual_amount", 20.0)
    current = len(db_list_participants_full(tournament_id))

    type_text = "–î—É—ç–ª—å–Ω—ã–π 1√ó1" if t_type == "duel" else "–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3"
    prize_text = {
        1: f"üèÖ –¢–∏–ø 1 ‚Äî {manual:.2f} –±–∞–ª–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        2: "ü•à –¢–∏–ø 2 ‚Äî 30 –±–∞–ª–ª–æ–≤ (25% –ø–ª–∞—Ç–∏—Ç –∏–≥—Ä–æ–∫)",
        3: "ü•á –¢–∏–ø 3 ‚Äî 30 –±–∞–ª–ª–æ–≤ (–∏–∑ –±–∞–Ω–∫–∞ –ë–µ–±—Ä)"
    }.get(bank_type, "‚ùì")

    embed = discord.Embed(
        title=f"üì£ –û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî –¢—É—Ä–Ω–∏—Ä #{tournament_id}",
        color=discord.Color.gold()
    )
    embed.add_field(name="–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞", value=type_text, inline=True)
    embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=f"{current}/{size}", inline=True)
    embed.add_field(name="–ü—Ä–∏–∑", value=prize_text, inline=False)
    embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")

    view = RegistrationView(tournament_id, size, type_text)
    await send_temp(ctx, embed=embed, view=view)
    return True

async def build_tournament_status_embed(tournament_id: int) -> discord.Embed | None:
    t = get_tournament_info(tournament_id)
    if not t:
        return None

    from bot.data.tournament_db import list_participants_full

    participants = list_participants_full(tournament_id)
    current = len(participants)
    t_type = t["type"]
    size = t["size"]
    bank_type = t.get("bank_type", 1)
    manual = t.get("manual_amount", 20.0)
    status = t.get("status", "unknown")
    start = t.get("start_time")

    type_text = "–î—É—ç–ª—å–Ω—ã–π 1√ó1" if t_type == "duel" else "–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3"
    prize_text = {
        1: f"üèÖ –¢–∏–ø 1 ‚Äî {manual:.2f} –±–∞–ª–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        2: "ü•à –¢–∏–ø 2 ‚Äî 30 –±–∞–ª–ª–æ–≤ (25% –ø–ª–∞—Ç–∏—Ç –∏–≥—Ä–æ–∫)",
        3: "ü•á –¢–∏–ø 3 ‚Äî 30 –±–∞–ª–ª–æ–≤ (–∏–∑ –±–∞–Ω–∫–∞ –ë–µ–±—Ä)"
    }.get(bank_type, "‚ùì")

    # –≠—Ç–∞–ø (—Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É)
    stage = "‚ùî –ù–µ –Ω–∞—á–∞—Ç"
    if status == "active":
        stage = "üîÅ –ê–∫—Ç–∏–≤–µ–Ω"
    elif status == "finished":
        stage = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω"

    embed = discord.Embed(
        title=f"üìã –¢—É—Ä–Ω–∏—Ä #{tournament_id} ‚Äî –°—Ç–∞—Ç—É—Å",
        color=discord.Color.blue()
    )
    embed.add_field(name="–¢–∏–ø", value=type_text, inline=True)
    embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=f"{current}/{size}", inline=True)
    embed.add_field(name="–ë–∞–Ω–∫", value=prize_text, inline=False)
    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=status.capitalize(), inline=True)
    embed.add_field(name="–≠—Ç–∞–ø", value=stage, inline=True)
    if start:
        embed.add_field(name="–ù–∞—á–∞–ª–æ", value=start, inline=False)

    # –£—á–∞—Å—Ç–Ω–∏–∫–∏ (ID)
    names = [
        f"<@{p['discord_user_id']}>" if p.get("discord_user_id") else f"ID: {p['player_id']}"
        for p in participants[:10]
    ]
    name_list = "\n".join(f"‚Ä¢ {n}" for n in names) if names else "‚Äî"
    embed.add_field(name="üìå –£—á–∞—Å—Ç–Ω–∏–∫–∏ (–ø–µ—Ä–≤—ã–µ 10)", value=name_list, inline=False)

    return embed


async def build_tournament_bracket_embed(tournament_id: int, guild: discord.Guild | None = None) -> discord.Embed | None:
    """–°—Ç—Ä–æ–∏—Ç embed-—Å–µ—Ç–∫—É —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ –∏–º–µ—é—â–∏–º—Å—è –º–∞—Ç—á–∞–º."""
    round_no = 1
    embed = discord.Embed(
        title=f"üèüÔ∏è –°–µ—Ç–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ #{tournament_id}",
        color=discord.Color.purple(),
    )

    any_matches = False
    while True:
        matches = tournament_db.get_matches(tournament_id, round_no)
        if not matches:
            break

        any_matches = True
        lines: list[str] = []
        for idx, m in enumerate(matches, start=1):
            if guild:
                p1m = guild.get_member(m["player1_id"])
                p2m = guild.get_member(m["player2_id"])
                p1 = p1m.mention if p1m else f"<@{m['player1_id']}>"
                p2 = p2m.mention if p2m else f"<@{m['player2_id']}>"
            else:
                p1 = f"<@{m['player1_id']}>"
                p2 = f"<@{m['player2_id']}>"

            mode_name = MODE_NAMES.get(m["mode"], str(m["mode"]))
            status = "‚è≥" if m.get("result") is None else ("üèÜ 1" if m["result"] == 1 else "üèÜ 2")
            lines.append(f"–ú–∞—Ç—á {idx}: {p1} vs {p2} ‚Äî `{m['map_id']}` ({mode_name}) {status}")

        embed.add_field(name=f"–†–∞—É–Ω–¥ {round_no}", value="\n".join(lines), inline=False)
        round_no += 1

    if not any_matches:
        embed.description = "–ú–∞—Ç—á–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã"

    return embed


async def send_tournament_reminders(bot: commands.Bot, hours: int = 24) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö."""
    from datetime import datetime
    upcoming = tournament_db.get_upcoming_tournaments(hours)
    for t in upcoming:
        start_iso = t.get("start_time")
        if not start_iso:
            continue
        try:
            dt = datetime.fromisoformat(start_iso)
            start_text = dt.strftime("%d.%m.%Y %H:%M")
        except Exception:
            start_text = start_iso
        participants = tournament_db.list_participants_full(t["id"])
        user_ids = [p.get("discord_user_id") for p in participants if p.get("discord_user_id")]
        teams = []
        if t.get("type") == "team" and user_ids:
            for i in range(0, len(user_ids), 3):
                teams.append(user_ids[i:i+3])

        matches = tournament_db.get_matches(t["id"], 1)
        for uid in user_ids:
            user = bot.get_user(uid)
            if not user:
                continue
            mate_list = []
            if teams:
                for tm in teams:
                    if uid in tm:
                        mate_list = [f"<@{m}>" for m in tm if m != uid]
                        break
            maps = [m["map_id"] for m in matches if uid in (m["player1_id"], m["player2_id"])]
            text_lines = [f"–°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è —Ç—É—Ä–Ω–∏—Ä #{t['id']} ({start_text})"]
            if mate_list:
                text_lines.append("–¢–≤–æ–∏ —Ç–∏–º–º–µ–π—Ç—ã: " + ", ".join(mate_list))
            if maps:
                text_lines.append("–ö–∞—Ä—Ç—ã: " + ", ".join(maps))
            msg = "\n".join(text_lines)
            try:
                await user.send(msg)
            except Exception:
                continue


async def tournament_reminder_loop(bot: commands.Bot) -> None:
    await bot.wait_until_ready()
    while not bot.is_closed():
        await send_tournament_reminders(bot)
        await asyncio.sleep(3600)

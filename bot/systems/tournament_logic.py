import random
from typing import List, Dict, Optional
import discord
from discord import ui, Embed, ButtonStyle
import os
from bot.data import db
from discord.ext import commands
from discord.abc import Messageable
from discord import TextChannel, Thread
import bot.data.tournament_db as tournament_db
from bot.data.players_db import get_player_by_id
from bot.data.tournament_db import count_matches 
from bot.data.tournament_db import (
    add_discord_participant as db_add_participant,
    list_participants  as db_list_participants,
    create_matches    as db_create_matches,
    record_match_result as db_record_match_result,
    save_tournament_result as db_save_tournament_result,
    update_tournament_status as db_update_tournament_status,
    list_participants_full as db_list_participants_full,
    remove_discord_participant as db_remove_discord_participant,
    remove_player_from_tournament
)
from bot.data.tournament_db import delete_tournament as delete_tournament_record
from bot.systems import tournament_rewards_logic as rewards
from bot.systems.tournament_bank_logic import validate_and_save_bank



assert db.supabase is not None, "Supabase client not initialized"
supabase = db.supabase

MODE_NAMES: Dict[int, str] = {
    1: "–ù–æ–∫–∞—É—Ç",
    2: "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–∏–º–∫—É",
    3: "–ó–∞—Ö–≤–∞—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤",
    4: "–ë—Ä–æ—É–ª–±–æ–ª",
}
ANNOUNCE_CHANNEL_ID = int(os.getenv("MONTHLY_TOP_CHANNEL_ID", 0))
MODE_IDS = list(MODE_NAMES.keys())

# –ö–∞—Ä—Ç—ã, —Ç–µ–ø–µ—Ä—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É —Ä–µ–∂–∏–º—É
MAPS_BY_MODE: Dict[int, List[str]] = {
    1: ["1.1 1", "1.2 2", "1.3 3"],
    2: ["2.1 4", "2.2 5", "2.3 6"],
    3: ["3.1 7", "3.2 8", "3.3 9"],
    4: ["4.1 10", "4.2 11", "4.3 12"],
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def create_tournament_record(t_type: str, size: int) -> int:
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –æ —Ç—É—Ä–Ω–∏—Ä–µ –≤ Supabase –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID.
    """
    res = supabase.table("tournaments") \
        .insert({
            "type": t_type,
            "size": size
        }) \
        .execute()
    return res.data[0]["id"]

def delete_tournament_record(tournament_id: int) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç —Ç—É—Ä–Ω–∏—Ä –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –∑–∞–ø–∏—Å–∏ (ON DELETE CASCADE).
    """
    supabase.table("tournaments") \
        .delete() \
        .eq("id", tournament_id) \
        .execute()
    return True


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–æ–º–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

class Match:
    def __init__(self, player1_id: int, player2_id: int, mode_id: int, map_id: str):
        self.player1_id = player1_id
        self.player2_id = player2_id
        self.mode_id = mode_id      # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ–≤–æ–π ID
        self.map_id = map_id
        self.result: Optional[int] = None
        self.match_id: Optional[int] = None
        self.bank_type: Optional[int] = None
        self.manual_amount: Optional[float] = None

class Tournament:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–æ–π —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–µ (–Ω–µ –≤ –ë–î).
    """
    def __init__(self,
         participants: List[int],
         modes: List[int],                  # —Ç–µ–ø–µ—Ä—å —ç—Ç–æ MODE_IDS
         maps_by_mode: Dict[int, List[str]] # –∫–ª—é—á–∏ ‚Äî —Ç–µ –∂–µ ID
    ):
        self.participants = participants.copy()
        self.modes = modes
        self.maps_by_mode = maps_by_mode
        self.current_round = 1
        self.matches: Dict[int, List[Match]] = {}

    def generate_round(self) -> List[Match]:
        random.shuffle(self.participants)
        round_matches: List[Match] = []
        for i in range(0, len(self.participants), 2):
            p1, p2 = self.participants[i], self.participants[i+1]
            # —Ç—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞
            picked = random.sample(self.modes, k=3)
            for mode_id in picked:
                map_list = self.maps_by_mode.get(mode_id, [])
                map_choice = random.choice(map_list) if map_list else ""
                round_matches.append(Match(p1, p2, mode_id, map_choice))
        self.matches[self.current_round] = round_matches
        self.current_round += 1
        return round_matches

    def record_result(self, round_number: int, match_index: int, winner: int):
        try:
            match = self.matches[round_number][match_index]
            match.result = winner
        except Exception:
            raise IndexError("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞—É–Ω–¥–µ")

    def get_winners(self, round_number: int) -> List[int]:
        winners: List[int] = []
        for m in self.matches.get(round_number, []):
            if m.result == 1:
                winners.append(m.player1_id)
            elif m.result == 2:
                winners.append(m.player2_id)
        return winners

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∏ –∫–∞—Ä—Ç—ã
MODES = ["—Ä–µ–∂–∏–º1", "—Ä–µ–∂–∏–º2", "—Ä–µ–∂–∏–º3", "—Ä–µ–∂–∏–º4"]
MAPS = {
    "—Ä–µ–∂–∏–º1": ["1.1 1", "1.2 2", "1.3 3"],
    "—Ä–µ–∂–∏–º2": ["2.1 4", "2.2 5", "2.3 6"],
    "—Ä–µ–∂–∏–º3": ["3.1 7", "3.2 8", "3.3 9"],
    "—Ä–µ–∂–∏–º4": ["4.1 10", "4.2 11", "4.3 12"],
}

def create_tournament_object(participants: List[int]) -> Tournament:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–µ (–±–µ–∑ –ë–î) –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Tournament —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
    """
    return Tournament(participants, MODE_IDS, MAPS_BY_MODE)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

class TournamentSetupView(ui.View):
    """
    –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π UI: –≤—ã–±–æ—Ä —Ç–∏–ø–∞, —Ä–∞–∑–º–µ—Ä–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î.
    """
    def __init__(self, author_id: int):
        super().__init__(timeout=120)
        self.author_id = author_id
        self.t_type: Optional[str] = None
        self.size:   Optional[int] = None
        self.manual_amount: Optional[float] = None
        self.bank_type: Optional[int] = None
        self._build_type_buttons()
        

    @staticmethod
    def initial_embed() -> discord.Embed:
        return discord.Embed(
            title="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞",
            description="–í—ã–±–µ—Ä–∏—Ç–µ **—Ç–∏–ø** —Ç—É—Ä–Ω–∏—Ä–∞:",
            color=discord.Color.gold()
        )
    def disable_all_items(self) -> None:
        """
        –û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ (–¥–µ–ª–∞–µ—Ç –∏—Ö disabled=True),
        —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –Ω–∞–∂–∞—Ç–∏–π.
        """
        for item in self.children:
            if isinstance(item, ui.Button):
                item.disabled = True
        
    def _build_type_buttons(self):
        self.clear_items()
        self.clear_items()
        # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –î—É—ç–ª—å
        btn1 = ui.Button(
            label="–î—É—ç–ª—å–Ω—ã–π 1√ó1",
            style=discord.ButtonStyle.primary,
            custom_id="type_duel"
        )
        # –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ—ë –∫–æ–ª–±—ç–∫
        btn1.callback = self.on_type_duel
        self.add_item(btn1)

        # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –ö–æ–º–∞–Ω–¥–Ω—ã–π
        btn2 = ui.Button(
            label="–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3",
            style=discord.ButtonStyle.primary,
            custom_id="type_team"
        )
        btn2.callback = self.on_type_team
        self.add_item(btn2)

    def _build_size_buttons(self):
        self.clear_items()
        # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        choices = [4, 8, 16] if self.t_type == "duel" else [6, 12, 24]
        for n in choices:
            btn = ui.Button(label=str(n),
style=discord.ButtonStyle.secondary,
            custom_id=f"size_{n}")
            # –≤–µ—à–∞–µ–º callback, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ interaction
            btn.callback = self.on_size
            self.add_item(btn)

    def _build_bank_type_selector(self):
        self.clear_items()

        select = ui.Select(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –±–∞–Ω–∫–∞ –Ω–∞–≥—Ä–∞–¥",
            options=[
                discord.SelectOption(label="–¢–∏–ø 1 ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value="1", description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞—Ç–∏—Ç 50% (–º–∏–Ω. 15 –±–∞–ª–ª–æ–≤)"),
                discord.SelectOption(label="–¢–∏–ø 2 ‚Äî –°–º–µ—à–∞–Ω–Ω—ã–π", value="2", description="25% –ø–ª–∞—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, 75% ‚Äî –±–∞–Ω–∫ –ë–µ–±—Ä"),
                discord.SelectOption(label="–¢–∏–ø 3 ‚Äî –ö–ª—É–±", value="3", description="100% –∏–∑ –±–∞–Ω–∫–∞ –ë–µ–±—Ä"),
            ],
            custom_id="bank_type"
        )
        select.callback = self.on_select_bank_type
        self.add_item(select)

    def _build_confirm_buttons(self):
        self.clear_items()
        # –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª
        btn_confirm = ui.Button(
            label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            style=discord.ButtonStyle.success,
            custom_id="confirm"
        )
        btn_confirm.callback = self.on_confirm  
        self.add_item(btn_confirm)

        # –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª
        btn_cancel = ui.Button(
            label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            style=discord.ButtonStyle.danger,
            custom_id="cancel"
        )
        btn_cancel.callback = self.on_cancel 
        self.add_item(btn_cancel)

    async def interaction_check(self, inter: discord.Interaction) -> bool:
        # –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º View
        return inter.user.id == self.author_id

    async def on_type_duel(self, interaction: discord.Interaction):
        self.t_type = "duel"
        embed = discord.Embed(
            title="–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞",
            description="üèÜ **–î—É—ç–ª—å–Ω—ã–π 1√ó1**\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ **–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**:",
            color=discord.Color.gold()
        )
        self._build_size_buttons()
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_type_team(self, interaction: discord.Interaction):
        self.t_type = "team"
        embed = discord.Embed(
            title="–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞",
            description="ü§ù **–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3**\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ **–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**:",
            color=discord.Color.gold()
        )
        self._build_size_buttons()
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_select_bank_type(self, interaction: discord.Interaction):
        data = interaction.data or {}
        selected = data.get("values", ["1"])[0]
        self.bank_type = int(selected)

        embed = discord.Embed(
            title="–ò—Å—Ç–æ—á–Ω–∏–∫ –±–∞–Ω–∫–∞ –Ω–∞–≥—Ä–∞–¥ –≤—ã–±—Ä–∞–Ω",
            description=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø: **{self.bank_type}**",
            color=discord.Color.blue()
        )

        # –¢–∏–ø 1 —Ç—Ä–µ–±—É–µ—Ç —Å—É–º–º—É
        if self.bank_type == 1:
            embed.add_field(name="‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É", value="–ú–∏–Ω. 15 –±–∞–ª–ª–æ–≤", inline=False)
            await interaction.response.send_modal(BankAmountModal(self))
        else:
            embed = discord.Embed(
                title="–ò—Å—Ç–æ—á–Ω–∏–∫ –±–∞–Ω–∫–∞ –Ω–∞–≥—Ä–∞–¥ –≤—ã–±—Ä–∞–Ω",
                description=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø: **{self.bank_type}**",
                color=discord.Color.blue()
            )
            self._build_confirm_buttons()
            await interaction.response.edit_message(embed=embed, view=self)

    async def on_size(self, interaction: discord.Interaction):
        # –¥–æ—Å—Ç–∞—ë–º custom_id –∏–∑ payload –∏ –ø–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
        data = interaction.data or {}
        cid = data.get("custom_id", "")
        try:
            self.size = int(cid.split("_", 1)[1])
        except (IndexError, ValueError):
            # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return
        type_name = "–î—É—ç–ª—å–Ω—ã–π 1√ó1" if self.t_type == "duel" else "–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3"
        embed = discord.Embed(
            title="–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞",
            description=(
                f"üèÜ **–¢–∏–ø:** {type_name}\n"
                f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {self.size}\n\n"
                "–ù–∞–∂–º–∏—Ç–µ **‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å** –∏–ª–∏ **‚ùå –û—Ç–º–µ–Ω–∏—Ç—å**"
            ),
            color=discord.Color.gold()
        )
        self._build_confirm_buttons()
        self._build_bank_type_selector()
        await interaction.response.edit_message(embed=embed, view=self)

    async def on_confirm(self, interaction: discord.Interaction):
        try:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª –∏ —Ç–∏–ø, –∏ —Ä–∞–∑–º–µ—Ä
            if self.t_type is None or self.size is None:
                # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–º—É–¥—Ä–∏–ª—Å—è –Ω–∞–∂–∞—Ç—å ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
                    await interaction.response.send_message(
                        "‚ùå –û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", 
                        ephemeral=True
                    )
                    return

            # –¢–µ–ø–µ—Ä—å —Ç–∏–ø –∏ —Ä–∞–∑–º–µ—Ä ‚Äî —Ç–æ—á–Ω–æ str –∏ int
            tour_id = create_tournament_record(self.t_type, self.size)
            ok, msg = validate_and_save_bank(tour_id, self.bank_type or 1, self.manual_amount)
            if not ok:
                await interaction.response.send_message(msg, ephemeral=True)
                return
            typetxt = "–î—É—ç–ª—å–Ω—ã–π 1√ó1" if self.t_type == "duel" else "–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3"
            prize_text = {
                1: f"üèÖ –¢–∏–ø 1 ‚Äî {self.manual_amount:.2f} –±–∞–ª–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                2: "ü•à –¢–∏–ø 2 ‚Äî 30 –±–∞–ª–ª–æ–≤ (25% –ø–ª–∞—Ç–∏—Ç –∏–≥—Ä–æ–∫)",
                3: "ü•á –¢–∏–ø 3 ‚Äî 30 –±–∞–ª–ª–æ–≤ (–∏–∑ –±–∞–Ω–∫–∞ –ë–µ–±—Ä)"
            }.get(self.bank_type or 1, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            embed = discord.Embed(
                title=f"‚úÖ –¢—É—Ä–Ω–∏—Ä #{tour_id} —Å–æ–∑–¥–∞–Ω!",
                description=(
                    f"üèÜ –¢–∏–ø: {'–î—É—ç–ª—å–Ω—ã–π 1√ó1' if self.t_type=='duel' else '–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3'}\n"
                    f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {self.size}\n"
                    f"üéÅ –ü—Ä–∏–∑: {prize_text}\n"
                    f"ID —Ç—É—Ä–Ω–∏—Ä–∞: **{tour_id}**"
                ),
                color=discord.Color.green()
            )
            self.disable_all_items()
            await interaction.response.edit_message(embed=embed, view=self)
            announcement = discord.Embed(
                title=f"üì£ –û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî –¢—É—Ä–Ω–∏—Ä #{tour_id}",
                color=discord.Color.gold()
            )
            # —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞
            announcement.add_field(name="–¢–∏–ø", value=typetxt, inline=True)
            announcement.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=str(self.size), inline=True)
            announcement.add_field(name="–ü—Ä–∏–∑", value=prize_text, inline=False)
            announcement.set_footer(text="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            # –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥–∞
            # (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä reward –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ª–∏–±–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)

            # –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –Ω–∞—à—É RegistrationView
            reg_view = RegistrationView(tournament_id=tour_id, max_participants=self.size, tour_type=typetxt)

            # –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞–º–∏
            reg_view.add_item(
                discord.ui.Button(
                    label="‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞–º–∏",
                    style=ButtonStyle.primary,
                    custom_id=f"manage_rounds:{tour_id}"
                )
            )
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª, –≥–¥–µ –±—ã–ª setup
            guild = interaction.guild
            if guild:
                chan = guild.get_channel(ANNOUNCE_CHANNEL_ID)
                if isinstance(chan, (TextChannel, Thread)):
                    sent = await chan.send(embed=announcement, view=reg_view)
                        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º sent.id –≤–º–µ—Å—Ç–µ —Å tour_id –≤ –ë–î
                    tournament_db.save_announcement_message(tournament_id=tour_id, message_id=sent.id)
                    return

            # fallback –Ω–∞ —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
            msg = interaction.message
            if msg and isinstance(msg.channel, (TextChannel, Thread, Messageable)):
                await msg.channel.send(embed=announcement, view=reg_view)
            else:
            # –≤ —Å–∞–º–æ–º –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º interaction.response
                await interaction.response.send_message(embed=announcement, view=reg_view)
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: `{e}`",
                ephemeral=True
            )
            import traceback
            print("–û—à–∏–±–∫–∞ –≤ on_confirm:\n", traceback.format_exc())

        
    async def on_cancel(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            color=discord.Color.red()
        )
        self.disable_all_items()
        await interaction.response.edit_message(embed=embed, view=self)

def add_participant_record(tournament_id: int, user_id: int) -> bool:
    res = supabase.table("tournament_participants")\
        .insert({"tournament_id": tournament_id, "user_id": user_id})\
        .execute()
    return bool(res.data)


    
def create_match_records(tournament_id: int, round_number: int, matches: list[Match]):
    recs = [{
        "tournament_id": tournament_id,
        "round_number": round_number,
        "player1_id": m.player1_id,
        "player2_id": m.player2_id,
        "mode_id": m.mode_id,
        "map_id": m.map_id
    } for m in matches]
    res = supabase.table("tournament_matches") \
        .insert(recs) \
        .execute()
    for m, r in zip(matches, res.data or []):
        m.match_id = r.get("id")
        
def list_match_records(tournament_id: int, round_number: int) -> list[Match]:
    resp = supabase.table("tournament_matches")\
        .select("*")\
        .eq("tournament_id", tournament_id)\
        .eq("round_number", round_number)\
        .execute()
    out = []
    for r in (resp.data or []):
        m = Match(r["player1_id"], r["player2_id"], r["mode"], r["map_id"])
        m.result = r.get("result")
        out.append(m)
    return out

def record_match_result_record(match_id: int, winner: int) -> bool:
    supabase.table("tournament_matches")\
        .update({"result": winner})\
        .eq("id", match_id)\
        .execute()
    return True

def save_tournament_result_record(tournament_id: int, first: int, second: int, third: Optional[int] = None):
    supabase.table("tournament_results").upsert({
        "tournament_id": tournament_id,
        "first_place_id": first,
        "second_place_id": second,
        "third_place_id": third
    }).execute()

async def start_round_logic(ctx: commands.Context, tournament_id: int) -> None:
    # 0) –ü–æ–ª—É—á–∞–µ–º ¬´—Å—ã—Ä—ã–µ¬ª –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    raw = db_list_participants_full(tournament_id)
    if not raw:
        await ctx.send(f"‚ùå –¢—É—Ä–Ω–∏—Ä #{tournament_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤ –Ω—ë–º –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    # ‚îÄ‚îÄ‚îÄ –§–æ—Ä–º–∏—Ä—É–µ–º participants –∏ display_map ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    participants: list[int] = []
    display_map: dict[int, str] = {}

    for entry in raw:
        d = entry.get("discord_user_id")
        p = entry.get("player_id")
        if d is not None:
            participants.append(d)
            display_map[d] = f"<@{d}>"
        elif p is not None:
            participants.append(p)
            pl = get_player_by_id(p)
            display_map[p] = pl["nick"] if pl else f"–ò–≥—Ä–æ–∫#{p}"
        else:
        # –ù–∏ —Ç–æ–≥–æ –Ω–∏ –¥—Ä—É–≥–æ–≥–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
            continue
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 1) –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if len(participants) < 2:
        await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")
        return
    # –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—ë—Ç–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if len(participants) % 2 != 0:
        await ctx.send("‚ö†Ô∏è –ù–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî –Ω—É–∂–Ω–æ —á—ë—Ç–Ω–æ–µ –¥–ª—è –ø–∞—Ä.")
        return

    tour = create_tournament_logic(participants)
    ctx.bot.get_cog("TournamentCog").active_tournaments[tournament_id] = tour
    
    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥–∏–ª—å–¥–∏–∏
    guild = ctx.guild
    if guild is None:
        await ctx.send("‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    matches = tour.generate_round()
    round_number = tour.current_round - 1

    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    create_match_records(tournament_id, round_number, matches)

    # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed
    embed = Embed(
        title=f"–†–∞—É–Ω–¥ {round_number} ‚Äî –¢—É—Ä–Ω–∏—Ä #{tournament_id}",
        description=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π:",
        color=discord.Color.blurple()
    )
    for idx, m in enumerate(matches, start=1):
        v1 = display_map.get(m.player1_id, f"<@{m.player1_id}>")
        v2 = display_map.get(m.player2_id, f"<@{m.player2_id}>")
        mode_name = MODE_NAMES.get(m.mode_id, str(m.mode_id))
        embed.add_field(
            name=f"–ú–∞—Ç—á {idx}",
            value=(
                f"{v1} vs {v2}\n"
                f"**–†–µ–∂–∏–º:** {mode_name}\n"
                f"**–ö–∞—Ä—Ç–∞:** {m.map_id}"
            ),
            inline=False
        )

    await ctx.send(embed=embed)


def create_tournament_logic(participants: List[int]) -> Tournament:
    return Tournament(participants, MODE_IDS, MAPS_BY_MODE)

async def join_tournament(ctx: commands.Context, tournament_id: int) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ —á–µ—Ä–µ–∑ –∑–∞–ø–∏—Å—å –≤ –ë–î
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∫–∞–Ω–∞–ª.
    """
    ok = db_add_participant(tournament_id, ctx.author.id)
    if ok:
        await ctx.send(f"‚úÖ {ctx.author.mention}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ #{tournament_id}")
    else:
        await ctx.send(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è "
            "(–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ —Ç—É—Ä–Ω–∏—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)."
        )

async def start_round(ctx: commands.Context, tournament_id: int) -> None:
    """
    1) –ë–µ—Ä—ë—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    2) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Ö >=2 –∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥–∏–ª—å–¥–∏–∏
    3) –°–æ–∑–¥–∞—ë—Ç/–¥–æ—Å—Ç–∞—ë—Ç –æ–±—ä–µ–∫—Ç Tournament
    4) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—É–Ω–¥, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
    5) –°—Ç—Ä–æ–∏—Ç Embed –∏ —à–ª—ë—Ç –≤ –∫–∞–Ω–∞–ª
    """
    # 1) –£—á–∞—Å—Ç–Ω–∏–∫–∏
    participants = db_list_participants(tournament_id)
    if len(participants) < 2:
        await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞.")
        return

    if len(participants) % 2 != 0:
        await ctx.send("‚ö†Ô∏è –ù–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî –Ω—É–∂–Ω–æ —á—ë—Ç–Ω–æ–µ –¥–ª—è –ø–∞—Ä.")
        return
    
    # 2) –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    guild = ctx.guild
    if guild is None:
        await ctx.send("‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    # 3) –û–±—ä–µ–∫—Ç —Ç—É—Ä–Ω–∏—Ä–∞
    tour = ctx.bot.get_cog("TournamentCog").active_tournaments.get(tournament_id)
    if not tour:
        user_ids = [p["user_id"] for p in participants]
        participants = user_ids  # –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–∑—É –∫–∞–∫ participants
        tour = create_tournament_logic(participants)
        ctx.bot.get_cog("TournamentCog").active_tournaments[tournament_id] = tour

    # 4) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∑–∞–ø–∏—Å—å
    matches = tour.generate_round()
    round_no = tour.current_round - 1
    db_create_matches(tournament_id, round_no, matches)

    for idx, m in enumerate(matches, start=1):
        # –ü–æ–ª—É—á–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
        p1 = guild.get_member(m.player1_id)
        p2 = guild.get_member(m.player2_id)
        v1 = p1.mention if p1 else f"<@{m.player1_id}>"
        v2 = p2.mention if p2 else f"<@{m.player2_id}>"

        mode_name = MODE_NAMES.get(m.mode_id, str(m.mode_id))

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ —Å–æ–∑–¥–∞—ë–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π Embed
        match_embed = discord.Embed(
            title=f"–ú–∞—Ç—á {idx} ‚Äî –†–∞—É–Ω–¥ {round_no}",
            description=f"{v1} vs {v2}",
            color=discord.Color.blue()
        )
        match_embed.add_field(name="–†–µ–∂–∏–º", value=mode_name, inline=True)
        match_embed.add_field(name="–ö–∞—Ä—Ç–∞", value=f"`{m.map_id}`", inline=True)
        assert m.match_id is not None, "match_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î"
        # –ò —Å–æ–∑–¥–∞—ë–º View —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–∞
        view = MatchResultView(match_id=m.match_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –º–∞—Ç—á
        await ctx.send(embed=match_embed, view=view)

async def report_result(ctx: commands.Context, match_id: int, winner: int) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É ?reportresult:
     1) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ winner == 1 –∏–ª–∏ 2
     2) –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ë–î —á–µ—Ä–µ–∑ db_record_match_result
     3) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ
    """
    if winner not in (1, 2):
        await ctx.send("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: 1 (player1) –∏–ª–∏ 2 (player2).")
        return

    ok = db_record_match_result(match_id, winner)
    if ok:
        await ctx.send(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ #{match_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî –∏–≥—Ä–æ–∫ {winner}.")
    else:
        await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –º–∞—Ç—á–∞.")

async def show_status(
    ctx: commands.Context,
    tournament_id: int,
    round_number: Optional[int] = None
) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞—É–Ω–¥.
    """
    # –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    if round_number is None:
        participants = db_list_participants_full(tournament_id)
        tour = ctx.bot.get_cog("TournamentCog").active_tournaments.get(tournament_id)
        last_round = (tour.current_round - 1) if tour else 0
        await ctx.send(
            f"üèü –¢—É—Ä–Ω–∏—Ä #{tournament_id}: —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {len(participants)}, "
            f"–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥ {last_round}"
        )
        return

    # –¥–µ—Ç–∞–ª—å–Ω–æ –ø–æ —Ä–∞—É–Ω–¥—É
    matches = list_match_records(tournament_id, round_number)
    if not matches:
        await ctx.send(f"‚ùå –†–∞—É–Ω–¥ {round_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    embed = Embed(
        title=f"üìã –¢—É—Ä–Ω–∏—Ä #{tournament_id} ‚Äî –†–∞—É–Ω–¥ {round_number}",
        color=discord.Color.green()
    )
    guild = ctx.guild
    for idx, m in enumerate(matches, start=1):
        status = (
            "‚è≥" if m.result is None
            else ("üèÜ 1" if m.result == 1 else "üèÜ 2")
        )
        mode_name = MODE_NAMES.get(m.mode_id, str(m.mode_id))
        # —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
        if guild:
            p1 = guild.get_member(m.player1_id)
            p2 = guild.get_member(m.player2_id)
            v1 = p1.mention if p1 else f"<@{m.player1_id}>"
            v2 = p2.mention if p2 else f"<@{m.player2_id}>"
        else:
            v1 = f"<@{m.player1_id}>"
            v2 = f"<@{m.player2_id}>"

        embed.add_field(
            name=f"–ú–∞—Ç—á {idx} {status}",
            value=(
                f"{v1} vs {v2}\n"
                f"**–†–µ–∂–∏–º:** {mode_name}\n"
                f"**–ö–∞—Ä—Ç–∞:** `{m.map_id}`"
            ),
            inline=False
        )

    await ctx.send(embed=embed)

async def end_tournament(
    ctx: commands.Context,
    tournament_id: int,
    first: int,
    second: int,
    third: Optional[int] = None
) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä:
     1) –§–æ—Ä–º–∏—Ä—É–µ—Ç –±–∞–Ω–∫ —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–∏–ø 1 ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ)
     2) –°–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã —Å –∏–≥—Ä–æ–∫–∞/–±–∞–Ω–∫–∞
     3) –ù–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã
     4) –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –±–∞–Ω–∫–∞ –∏ —Å—É–º–º—É
    bank_row = supabase.table("tournaments").select("bank_type, manual_amount").eq("id", tournament_id).single().execute()
    bank_data = bank_row.data or {}

    bank_type = bank_data.get("bank_type", 1)
    manual_amount = bank_data.get("manual_amount", 20.0)

    user_balance = db.scores.get(ctx.author.id, 0.0)

    try:
        bank_total, user_part, bank_part = rewards.calculate_bank(bank_type, user_balance, manual_amount)
    except ValueError as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    # üîπ –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ / –±–∞–Ω–∫–∞
    success = rewards.charge_bank_contribution(
        user_id=ctx.author.id,
        user_amount=user_part,
        bank_amount=bank_part,
        reason=f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ #{tournament_id}"
    )
    if not success:
        await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—à–∏–±–∫–∞ –±–∞–Ω–∫–∞.")
        return

    # üîπ –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
    all_participants = db_list_participants(tournament_id)

    def resolve_team(place_id: int):
        return [
            p["discord_user_id"] or p["player_id"]
            for p in all_participants
            if (p["discord_user_id"] == place_id or p["player_id"] == place_id)
        ]

    first_team = resolve_team(first)
    second_team = resolve_team(second)

    # üîπ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
    rewards.distribute_rewards(
        tournament_id=tournament_id,
        bank_total=bank_total,
        first_team_ids=first_team,
        second_team_ids=second_team,
        author_id=ctx.author.id
    )

    # üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    ok1 = db_save_tournament_result(tournament_id, first, second, third)
    ok2 = db_update_tournament_status(tournament_id, "finished")

    if ok1 and ok2:
        await ctx.send(
            f"üèÅ –¢—É—Ä–Ω–∏—Ä #{tournament_id} –∑–∞–≤–µ—Ä—à—ë–Ω –∏ –Ω–∞–≥—Ä–∞–¥—ã –≤—ã–¥–∞–Ω—ã:\n"
            f"ü•á {first} (x{len(first_team)})\n"
            f"ü•à {second} (x{len(second_team)})" +
            (f"\nü•â {third}" if third is not None else "")
        )
    else:
        await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")

class ConfirmDeleteView(ui.View):
    def __init__(self, tournament_id: int):
        super().__init__(timeout=60)
        self.tid = tournament_id

    @ui.button(label="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", style=discord.ButtonStyle.danger)
    async def confirm(self, interaction: discord.Interaction, button: ui.Button):
        ok = delete_tournament_record(self.tid)
        if ok:
            await interaction.response.edit_message(
                embed=Embed(
                    title=f"‚úÖ –¢—É—Ä–Ω–∏—Ä #{self.tid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω",
                    color=discord.Color.green()
                ),
                view=None
            )
        else:
            await interaction.response.edit_message(
                embed=Embed(
                    title="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.",
                    color=discord.Color.red()
                ),
                view=None
            )

async def delete_tournament(
    ctx: commands.Context,
    tournament_id: int
) -> None:
    """
    –®–ª—ë—Ç embed —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞.
    –°–∞–º–æ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ –∫–ª–∏–∫—É –∫–Ω–æ–ø–∫–∏.
    """
    embed = Embed(
        title=f"‚ùó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ #{tournament_id}",
        description="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ **–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ**.",
        color=discord.Color.red()
    )
    view = ConfirmDeleteView(tournament_id)
    await ctx.send(embed=embed, view=view)

class MatchResultView(ui.View):
    def __init__(self, match_id: int):
        super().__init__(timeout=60)
        self.match_id = match_id

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        # –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        guild = interaction.guild
        if guild is None:
            await interaction.response.send_message(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                ephemeral=True
            )
            return False

        # –ü–æ–ª—É—á–∞–µ–º Member –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        member = guild.get_member(interaction.user.id)
        if member is None:
            await interaction.response.send_message(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                ephemeral=True
            )
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not member.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–æ–±—â–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞.",
                ephemeral=True
            )
            return False

        return True
        
    @ui.button(label="üèÜ –ò–≥—Ä–æ–∫ 1", style=discord.ButtonStyle.primary)
    async def win1(self, interaction: discord.Interaction, button: ui.Button):
        await self._report(interaction, 1)

    @ui.button(label="üèÜ –ò–≥—Ä–æ–∫ 2", style=discord.ButtonStyle.secondary)
    async def win2(self, interaction: discord.Interaction, button: ui.Button):
        await self._report(interaction, 2)

    async def _report(self, interaction: discord.Interaction, winner: int):
        ok = db_record_match_result(self.match_id, winner)
        if ok:
            await interaction.response.edit_message(
                embed=Embed(
                    title=f"–ú–∞—Ç—á #{self.match_id}: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî –∏–≥—Ä–æ–∫ {winner}",
                    color=discord.Color.green()
                ),
                view=None
            )
        else:
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
                ephemeral=True
            )

async def show_history(ctx: commands.Context, limit: int = 10) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ `limit` –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    –≤–º–µ—Å—Ç–µ —Å –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    """
    res = supabase.table("tournament_results") \
        .select("*") \
        .order("finished_at", desc=True) \
        .limit(limit) \
        .execute()
    rows = res.data or []
    if not rows:
        await ctx.send("üì≠ –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        return

    embed = Embed(
        title="üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤",
        color=discord.Color.teal()
    )

    for r in rows:
        tid = r["tournament_id"]
        first = r["first_place_id"]
        second = r["second_place_id"]
        third = r.get("third_place_id")

        # --- –ù–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---
        participants = db_list_participants(tid)       # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç List[int]
        total_participants = len(participants)

        total_matches = count_matches(tid)          # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int

        places_line = f"ü•á {first}  ü•à {second}" + (f"  ü•â {third}" if third else "")
        stats_line = (
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_participants}\n"
            f"üé≤ –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: {total_matches}\n"
            f"‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ: `?tournamentstatus {tid}`"
        )

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–Ω–æ –ø–æ–ª–µ
        embed.add_field(
            name=f"–¢—É—Ä–Ω–∏—Ä #{tid}",
            value=f"{places_line}\n\n{stats_line}",
            inline=False
        )

    await ctx.send(embed=embed)

class RegistrationView(ui.View):
    persistent = True
    def __init__(self, tournament_id: int, max_participants: int, tour_type: Optional[str] = None):
        super().__init__(timeout=None)
        self.tid = tournament_id
        self.max = max_participants
        self.tour_type = tour_type
        self._build_button()

    def _build_button(self):
        self.clear_items()
        raw = db_list_participants_full(self.tid)
        current = len(raw)
        btn = ui.Button(
            label=f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ({current}/{self.max})",
            style=discord.ButtonStyle.primary,
            custom_id=f"register_{self.tid}"
        )
        btn.callback = self.register
        btn.disabled = current >= self.max
        self.add_item(btn)

    async def register(self, interaction: discord.Interaction):
        ok = db_add_participant(self.tid, interaction.user.id)
        if not ok:
            return await interaction.response.send_message(
                "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ —Ç—É—Ä–Ω–∏—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", ephemeral=True
            )
        # –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        await interaction.response.send_message(
            f"‚úÖ {interaction.user.mention}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ #{self.tid}.", ephemeral=True
        )
        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        self._build_button()
        assert interaction.message is not None, "interaction.message –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None"
        await interaction.message.edit(view=self)
        
async def announce_tournament(
    ctx: commands.Context,
    tournament_id: int,
    tour_type: str,
    max_participants: int,
    reward: Optional[str] = None
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–∞–Ω–∞–ª Embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—É—Ä–Ω–∏—Ä–µ –∏ –∫–Ω–æ–ø–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    embed = Embed(
        title=f"üì£ –û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî –¢—É—Ä–Ω–∏—Ä #{tournament_id}",
        color=discord.Color.gold()
    )
    embed.add_field(name="–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞", value=tour_type, inline=True)
    embed.add_field(name="–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=str(max_participants), inline=True)
    if reward:
        embed.add_field(name="–ü—Ä–∏–∑", value=reward, inline=False)
    embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")

    view = RegistrationView(tournament_id, max_participants)
    await ctx.send(embed=embed, view=view)

async def handle_jointournament(ctx: commands.Context, tournament_id: int):
    ok = db_add_participant(tournament_id, ctx.author.id)
    if not ok:
        return await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ).")
    await ctx.send(f"‚úÖ <@{ctx.author.id}> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ç—É—Ä–Ω–∏—Ä–µ #{tournament_id}.")
    # —Ç—É—Ç –º–æ–∂–Ω–æ –µ—â—ë –æ–±–Ω–æ–≤–∏—Ç—å RegistrationView, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

async def handle_regplayer(ctx: commands.Context, player_id: int, tournament_id: int):
    ok = db_add_participant(tournament_id, player_id)
    if not ok:
        return await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞.")
    pl = get_player_by_id(player_id)
    name = pl["nick"] if pl else f"–ò–≥—Ä–æ–∫#{player_id}"
    await ctx.send(f"‚úÖ {name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ç—É—Ä–Ω–∏—Ä–µ #{tournament_id}.")

async def handle_unregister(ctx: commands.Context, identifier: str, tournament_id: int):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    if identifier.startswith("<@") and identifier.endswith(">"):
        uid = int(identifier.strip("<@!>"))
        ok = db_remove_discord_participant(tournament_id, uid)
        name = f"<@{uid}>"
    else:
        pid = int(identifier)
        ok = db_remove_discord_participant(pid, tournament_id)
        pl = get_player_by_id(pid)
        name = pl["nick"] if pl else f"–ò–≥—Ä–æ–∫#{pid}"

    if not ok:
        return await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Å —Ç—É—Ä–Ω–∏—Ä–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ).")
    await ctx.send(f"‚úÖ {name} —É–¥–∞–ª—ë–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ #{tournament_id}.")

class BankAmountModal(ui.Modal, title="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∞–Ω–∫–∞"):
    amount = ui.TextInput(label="–°—É–º–º–∞ (–º–∏–Ω–∏–º—É–º 15)", placeholder="20", required=True)

    def __init__(self, view: TournamentSetupView):
        super().__init__()
        self.view = view

    async def on_submit(self, interaction: discord.Interaction):
        try:
            value = float(self.amount.value.replace(",", "."))
            if value < 15:
                raise ValueError("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ")
            self.view.manual_amount = value
            await interaction.response.send_message(f"‚úÖ –°—É–º–º–∞ –±–∞–Ω–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: **{value:.2f}**", ephemeral=True)
        except Exception:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω. 15)", ephemeral=True)

async def send_announcement_embed(ctx, tournament_id: int) -> bool:
    try:
        res = supabase.table("tournaments")\
            .select("type, size, bank_type, manual_amount")\
            .eq("id", tournament_id)\
            .single()\
            .execute()
        data = res.data
        if not data:
            return False
    except Exception:
        return False

    from bot.data.tournament_db import list_participants_full as db_list_participants_full

    t_type = data["type"]
    size = data["size"]
    bank_type = data.get("bank_type", 1)
    manual = data.get("manual_amount", 20.0)
    current = len(db_list_participants_full(tournament_id))

    type_text = "–î—É—ç–ª—å–Ω—ã–π 1√ó1" if t_type == "duel" else "–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3"
    prize_text = {
        1: f"üèÖ –¢–∏–ø 1 ‚Äî {manual:.2f} –±–∞–ª–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        2: "ü•à –¢–∏–ø 2 ‚Äî 30 –±–∞–ª–ª–æ–≤ (25% –ø–ª–∞—Ç–∏—Ç –∏–≥—Ä–æ–∫)",
        3: "ü•á –¢–∏–ø 3 ‚Äî 30 –±–∞–ª–ª–æ–≤ (–∏–∑ –±–∞–Ω–∫–∞ –ë–µ–±—Ä)"
    }.get(bank_type, "‚ùì")

    embed = discord.Embed(
        title=f"üì£ –û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî –¢—É—Ä–Ω–∏—Ä #{tournament_id}",
        color=discord.Color.gold()
    )
    embed.add_field(name="–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞", value=type_text, inline=True)
    embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=f"{current}/{size}", inline=True)
    embed.add_field(name="–ü—Ä–∏–∑", value=prize_text, inline=False)
    embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")

    view = RegistrationView(tournament_id, size, type_text)
    await ctx.send(embed=embed, view=view)
    return True

async def build_tournament_status_embed(tournament_id: int) -> discord.Embed | None:
    try:
        res = supabase.table("tournaments")\
            .select("type, size, bank_type, manual_amount, status")\
            .eq("id", tournament_id)\
            .single()\
            .execute()
        t = res.data
        if not t:
            return None
    except Exception:
        return None

    from bot.data.tournament_db import list_participants_full

    participants = list_participants_full(tournament_id)
    current = len(participants)
    t_type = t["type"]
    size = t["size"]
    bank_type = t.get("bank_type", 1)
    manual = t.get("manual_amount", 20.0)
    status = t.get("status", "unknown")

    type_text = "–î—É—ç–ª—å–Ω—ã–π 1√ó1" if t_type == "duel" else "–ö–æ–º–∞–Ω–¥–Ω—ã–π 3√ó3"
    prize_text = {
        1: f"üèÖ –¢–∏–ø 1 ‚Äî {manual:.2f} –±–∞–ª–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        2: "ü•à –¢–∏–ø 2 ‚Äî 30 –±–∞–ª–ª–æ–≤ (25% –ø–ª–∞—Ç–∏—Ç –∏–≥—Ä–æ–∫)",
        3: "ü•á –¢–∏–ø 3 ‚Äî 30 –±–∞–ª–ª–æ–≤ (–∏–∑ –±–∞–Ω–∫–∞ –ë–µ–±—Ä)"
    }.get(bank_type, "‚ùì")

    # –≠—Ç–∞–ø (—Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É)
    stage = "‚ùî –ù–µ –Ω–∞—á–∞—Ç"
    if status == "active":
        stage = "üîÅ –ê–∫—Ç–∏–≤–µ–Ω"
    elif status == "finished":
        stage = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω"

    embed = discord.Embed(
        title=f"üìã –¢—É—Ä–Ω–∏—Ä #{tournament_id} ‚Äî –°—Ç–∞—Ç—É—Å",
        color=discord.Color.blue()
    )
    embed.add_field(name="–¢–∏–ø", value=type_text, inline=True)
    embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=f"{current}/{size}", inline=True)
    embed.add_field(name="–ë–∞–Ω–∫", value=prize_text, inline=False)
    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=status.capitalize(), inline=True)
    embed.add_field(name="–≠—Ç–∞–ø", value=stage, inline=True)

    # –£—á–∞—Å—Ç–Ω–∏–∫–∏ (ID)
    names = [
        f"<@{p['discord_user_id']}>" if p.get("discord_user_id") else f"ID: {p['player_id']}"
        for p in participants[:10]
    ]
    name_list = "\n".join(f"‚Ä¢ {n}" for n in names) if names else "‚Äî"
    embed.add_field(name="üìå –£—á–∞—Å—Ç–Ω–∏–∫–∏ (–ø–µ—Ä–≤—ã–µ 10)", value=name_list, inline=False)

    return embed
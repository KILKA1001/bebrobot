import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã Discord
import discord

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import os
import asyncio
from dotenv import load_dotenv
import pytz
from collections import defaultdict
from discord import ui

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from bot.data import db
from bot.commands import bot as command_bot
from bot.commands import run_monthly_top
from datetime import datetime, timedelta, timezone


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
COMMAND_PREFIX = '?'
TIME_FORMAT = "%H:%M (%d.%m.%Y)"
TOP_CHANNEL_ID = int(os.getenv("MONTHLY_TOP_CHANNEL_ID", 0))

# –¢–∞–π–º–µ—Ä—ã —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
active_timers = {}

bot = command_bot
db.bot = bot

def build_fine_embed(fine: dict) -> discord.Embed:
    embed = discord.Embed(
        title=f"üìå –®—Ç—Ä–∞—Ñ #{fine['id']}",
        description=fine.get("reason", "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"),
        color=discord.Color.red()
    )
    embed.add_field(name="–°—É–º–º–∞", value=f"{fine['amount']:.2f} –±–∞–ª–ª–æ–≤", inline=True)
    paid = fine.get("paid_amount", 0.0)
    embed.add_field(name="–û–ø–ª–∞—á–µ–Ω–æ", value=f"{paid:.2f} / {fine['amount']:.2f}", inline=True)
    status = "‚úÖ –û–ø–ª–∞—á–µ–Ω" if fine.get("is_paid") else "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=status, inline=False)
    return embed

def build_fine_detail_embed(fine: dict) -> discord.Embed:
    embed = discord.Embed(
        title=f"üìã –î–µ—Ç–∞–ª–∏ —à—Ç—Ä–∞—Ñ–∞ #{fine['id']}",
        description=fine.get("reason", "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"),
        color=discord.Color.red()
    )
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    embed.add_field(name="üí∞ –°—É–º–º–∞", value=f"{fine['amount']:.2f} –±–∞–ª–ª–æ–≤", inline=True)
    fine_type = fine.get("type", 1)
    type_text = "–û–±—ã—á–Ω—ã–π (14 –¥–Ω–µ–π)" if fine_type == 1 else "–£—Å–∏–ª–µ–Ω–Ω—ã–π (30 –¥–Ω–µ–π)"
    embed.add_field(name="üìù –¢–∏–ø", value=type_text, inline=True)
    # –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    paid = fine.get("paid_amount", 0.0)
    remaining = fine['amount'] - paid
    embed.add_field(name="üí≥ –û–ø–ª–∞—Ç–∞", value=f"{paid:.2f} / {fine['amount']:.2f} –±–∞–ª–ª–æ–≤", inline=True)
    if remaining > 0:
        embed.add_field(name="üí∏ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ–ø–ª–∞—Ç–∏—Ç—å", value=f"{remaining:.2f} –±–∞–ª–ª–æ–≤", inline=True)
    # –î–∞—Ç—ã
    created_at = fine.get("created_at", "")[:10] if fine.get("created_at") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    due_date = fine.get("due_date", "")[:10] if fine.get("due_date") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    embed.add_field(name="üìÖ –°–æ–∑–¥–∞–Ω", value=created_at, inline=True)
    embed.add_field(name="‚è∞ –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã", value=due_date, inline=True)
    # –°—Ç–∞—Ç—É—Å
    if fine.get("is_canceled"):
        status = "üö´ –û—Ç–º–µ–Ω—ë–Ω"
        embed.color = discord.Color.orange()
    elif fine.get("is_paid"):
        status = "‚úÖ –û–ø–ª–∞—á–µ–Ω"
        embed.color = discord.Color.green()
    elif fine.get("is_overdue"):
        status = "‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω"
        embed.color = discord.Color.dark_red()
    else:
        status = "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
    embed.add_field(name="üîç –°—Ç–∞—Ç—É—Å", value=status, inline=False)
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if fine.get("postponed_until"):
        postponed = fine["postponed_until"][:10]
        embed.add_field(name="üìÜ –û—Ç—Å—Ä–æ—á–∫–∞ –¥–æ", value=postponed, inline=True)
    if fine.get("was_on_time") is not None:
        on_time_text = "‚úÖ –î–∞" if fine["was_on_time"] else "‚ùå –ù–µ—Ç"
        embed.add_field(name="‚è±Ô∏è –û–ø–ª–∞—á–µ–Ω –≤–æ–≤—Ä–µ–º—è", value=on_time_text, inline=True)
    return embed

class FineView(ui.View):
    def __init__(self, fine: dict):
        super().__init__(timeout=60)
        self.fine = fine
        # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã/–æ—Ç—Å—Ä–æ—á–∫–∏

class FinePaginator:
    def __init__(self, fines: list[dict], per_page: int = 5):
        self.fines = fines
        self.per_page = per_page

    def get_page(self, page: int) -> list[dict]:
        start = (page - 1) * self.per_page
        return self.fines[start:start + self.per_page]

class AllFinesView(ui.View):
    def __init__(self, fines: list[dict], ctx):
        super().__init__(timeout=60)
        self.fines = fines
        self.ctx = ctx
        self.page = 0

    def get_page_embed(self) -> discord.Embed:
        fine = self.fines[self.page]
        return build_fine_embed(fine)

def get_fine_leaders(limit: int = 3) -> list[tuple[int, float]]:
    debt = defaultdict(float)
    for f in db.fines:
        if not f.get("is_paid") and not f.get("is_canceled"):
            owed = f["amount"] - f.get("paid_amount", 0.0)
            debt[f["user_id"]] += owed
    return sorted(debt.items(), key=lambda x: x[1], reverse=True)[:limit]

async def send_greetings(channel, user_list):
    for user_id in user_list:
        await channel.send(f"–ü—Ä–∏–≤–µ—Ç, <@{user_id}>!")
        await asyncio.sleep(1)

async def autosave_task():
    await bot.wait_until_ready()
    while not bot.is_closed():
        db.save_all()
        print("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        await asyncio.sleep(300)

@bot.event
async def on_ready():
    print(f'üü¢ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    print(f'–°–µ—Ä–≤–µ—Ä–æ–≤: {len(bot.guilds)}')

    db.load_data()

    activity = discord.Activity(
        name="–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É ?helpy —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã üß†",
        type=discord.ActivityType.listening
    )
    await bot.change_presence(activity=activity)

    # üëá —Ç—É—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ
    asyncio.create_task(autosave_task())

    print('--- –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ---')
    print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.scores)}')
    print(f'–ò—Å—Ç–æ—Ä–∏–π –¥–µ–π—Å—Ç–≤–∏–π: {sum(len(v) for v in db.history.values())}')
    print("üì° –ó–∞–¥–∞—á–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")

async def monthly_top_task():
    await bot.wait_until_ready()
    while not bot.is_closed():
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        if now.day == 1:
            try:
                if db.supabase:
                    check = db.supabase.table("monthly_top_log") \
                        .select("id") \
                        .eq("month", now.month) \
                        .eq("year", now.year) \
                        .execute()
                    if check.data:
                        print("‚è≥ –¢–æ–ø —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ")
                        await asyncio.sleep(3600)
                        continue

                channel = bot.get_channel(TOP_CHANNEL_ID)
                if isinstance(channel, discord.TextChannel):
                    msg = await channel.send("üîÅ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–ø –º–µ—Å—è—Ü–∞...")
                    ctx = await bot.get_context(msg)

                    from bot.systems.core_logic import run_monthly_top
                    await run_monthly_top(ctx)
                    def get_fine_leaders(limit: int = 3) -> list[tuple[int, float]]:
                        """
                        –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —Å—É–º–º–æ–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤.
                        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ `limit` –∑–∞–ø–∏—Å–µ–π –≤–∏–¥–∞ (user_id, total_debt), –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–æ–ª–≥–∞.
                        """
                        debt = defaultdict(float)
                        for fine in db.fines:
                            if not fine.get("is_paid") and not fine.get("is_canceled"):
                                paid = fine.get("paid_amount", 0.0)
                                debt[fine["user_id"]] += fine["amount"] - paid

                        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ –¥–æ–ª–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ limit —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        top = sorted(debt.items(), key=lambda x: x[1], reverse=True)[:limit]
                        return top
                    # üî• –®—Ç—Ä–∞—Ñ–Ω–æ–π –∞–Ω—Ç–∏–±–æ–Ω—É—Å –¥–ª—è —Ç–æ–ø-–¥–æ–ª–∂–Ω–∏–∫–æ–≤
                    top_fines = get_fine_leaders()
                    punishments = [0.01, 0.03, 0.05]

                    for (uid, total), percent in zip(top_fines, punishments):
                        penalty = round(total * percent, 2)
                        db.update_scores(uid, -penalty)
                        db.add_action(
                            user_id=uid,
                            points=-penalty,
                            reason=f"–ê–Ω—Ç–∏–±–æ–Ω—É—Å –∑–∞ —Ç–æ–ø —à—Ç—Ä–∞—Ñ–Ω–∏–∫–æ–≤ ({int(percent * 100)}%)",
                            author_id=0
                        )

                    db.log_monthly_fine_top(list(zip(top_fines, punishments)))
                else:
                    print("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Ç–æ–ø–∞ –º–µ—Å—è—Ü–∞: {e}")

        await asyncio.sleep(360)

async def check_overdue_fines(bot):
    while True:
        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤
        await asyncio.sleep(3600)

async def debt_repayment_loop(bot):
    while True:
        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
        await asyncio.sleep(86400)

async def reminder_loop(bot):
    while True:
        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —à—Ç—Ä–∞—Ñ–∞—Ö
        await asyncio.sleep(86400)

async def fines_summary_loop(bot):
    while True:
        # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö/–µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —Å–≤–æ–¥–æ–∫ —à—Ç—Ä–∞—Ñ–æ–≤
        await asyncio.sleep(604800)

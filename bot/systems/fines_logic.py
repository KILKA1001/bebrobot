import discord
from discord.ui import View, Button
from datetime import datetime, timezone, timedelta
from typing import List
from bot.data import db
import asyncio


# üí° –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —à—Ç—Ä–∞—Ñ–∞
def get_fine_status(fine: dict) -> str:
    if fine.get("is_canceled"):
        return "üö´ –û—Ç–º–µ–Ω—ë–Ω"
    if fine.get("is_paid"):
        return "‚úÖ –û–ø–ª–∞—á–µ–Ω"
    if fine.get("is_overdue"):
        return "‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω"
    return "‚è≥ –ê–∫—Ç–∏–≤–µ–Ω"


# üí° –°—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É
def format_fine_due_date(fine: dict) -> str:
    raw = fine.get("due_date")
    if not isinstance(raw, str):
        return "N/A"
    try:
        dt = datetime.fromisoformat(raw)
        return dt.astimezone(timezone.utc).strftime("%d.%m.%Y")
    except Exception:
        return raw
                
# üìã Embed –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à—Ç—Ä–∞—Ñ–µ
def build_fine_embed(fine: dict) -> discord.Embed:
    embed = discord.Embed(title=f"üìå –®—Ç—Ä–∞—Ñ ID #{fine['id']}", color=discord.Color.orange())
    embed.add_field(name="üí∞ –°—É–º–º–∞", value=f"{fine['amount']} –±–∞–ª–ª–æ–≤", inline=True)
    embed.add_field(name="üì§ –û—Å—Ç–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å", value=f"{fine['amount'] - fine.get('paid_amount', 0):.2f} –±–∞–ª–ª–æ–≤", inline=True)
    embed.add_field(name="üìÖ –°—Ä–æ–∫", value=format_fine_due_date(fine), inline=True)
    embed.add_field(name="üè∑Ô∏è –¢–∏–ø", value=f"{'–û–±—ã—á–Ω—ã–π' if fine['type'] == 1 else '–£—Å–∏–ª–µ–Ω–Ω—ã–π'}", inline=True)
    embed.add_field(name="üìç –°—Ç–∞—Ç—É—Å", value=get_fine_status(fine), inline=True)
    embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞", value=fine['reason'], inline=False)
    return embed


# üìã Embed –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def build_fine_detail_embed(fine: dict) -> discord.Embed:
    embed = build_fine_embed(fine)
    embed.title = f"‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —à—Ç—Ä–∞—Ñ–∞ #{fine['id']}"
    embed.set_footer(text=f"–ù–∞–∑–Ω–∞—á–µ–Ω: {fine['created_at'][:10]} | –ê–≤—Ç–æ—Ä: <@{fine['author_id']}>")
    return embed


# üéõÔ∏è View —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º —à—Ç—Ä–∞—Ñ–æ–º
class FineView(View):
    def __init__(self, fine: dict):
        super().__init__(timeout=120)
        self.fine = fine


    @discord.ui.button(label="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", style=discord.ButtonStyle.green, custom_id="pay")
    async def pay(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message(
            f"üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã —à—Ç—Ä–∞—Ñ–∞ #{self.fine['id']}",
            view=PaymentMenuView(self.fine),
            ephemeral=True
        )

    @discord.ui.button(label="üìÖ –û—Ç—Å—Ä–æ—á–∫–∞", style=discord.ButtonStyle.blurple, custom_id="postpone")
    async def postpone(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer(ephemeral=True)
        guild = interaction.guild
        member = guild.get_member(interaction.user.id) if guild else None
        is_admin = member.guild_permissions.administrator if member else False


        can_user = db.can_postpone(interaction.user.id)
        if not is_admin and not can_user:
            await interaction.followup.send("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –æ—Ç—Å—Ä–æ—á–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–µ—Å—è—Ü–∞.", ephemeral=True)
            return

        success = db.apply_postponement(self.fine['id'], days=7)
        if success:
            self.fine['due_date'] = (datetime.fromisoformat(self.fine['due_date']) + timedelta(days=7)).isoformat()
            self.fine['postponed_until'] = datetime.now(timezone.utc).isoformat()
            await interaction.followup.send(f"üìÖ –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã —à—Ç—Ä–∞—Ñ–∞ #{self.fine['id']} –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ 7 –¥–Ω–µ–π.", ephemeral=True)
        else:
            await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ —à—Ç—Ä–∞—Ñ–∞.", ephemeral=True)

    @discord.ui.button(label="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", style=discord.ButtonStyle.gray, custom_id="details")
    async def details(self, interaction: discord.Interaction, button: Button):
        embed = build_fine_detail_embed(self.fine)
        await interaction.response.send_message(embed=embed, ephemeral=True)


# üîÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤
class FinePaginator:
    def __init__(self, fines: List[dict], per_page: int = 5):
        self.fines = fines
        self.per_page = per_page
        self.total_pages = max(1, (len(fines) + per_page - 1) // per_page)

    def get_page(self, page: int) -> List[dict]:
        start = (page - 1) * self.per_page
        end = start + self.per_page
        return self.fines[start:end]


# üí∏ –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
class PaymentMenuView(View):
    def __init__(self, fine: dict):
        super().__init__(timeout=90)
        self.fine = fine

    @discord.ui.button(label="üíØ 100%", style=discord.ButtonStyle.green, custom_id="pay_100")
    async def pay_100(self, interaction: discord.Interaction, button: Button):
        await process_payment(interaction, self.fine, 1.0)

    @discord.ui.button(label="üåì 50%", style=discord.ButtonStyle.blurple, custom_id="pay_50")
    async def pay_50(self, interaction: discord.Interaction, button: Button):
        await process_payment(interaction, self.fine, 0.5)

    @discord.ui.button(label="üåó 25%", style=discord.ButtonStyle.gray, custom_id="pay_25")
    async def pay_25(self, interaction: discord.Interaction, button: Button):
        await process_payment(interaction, self.fine, 0.25)

    @discord.ui.button(label="‚úèÔ∏è –°–≤–æ—è —Å—É–º–º–∞", style=discord.ButtonStyle.secondary, custom_id="pay_custom")
    async def pay_custom(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç. (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", ephemeral=True)


async def process_payment(interaction: discord.Interaction, fine: dict, percent: float):
    await interaction.response.defer(ephemeral=True)
    user_id = interaction.user.id
    user_points = db.scores.get(user_id, 0)
    amount_remaining = fine['amount'] - fine.get('paid_amount', 0)
    to_pay = round(amount_remaining * percent, 2)

    if user_points < to_pay:
        await interaction.followup.send(f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã {to_pay} –±–∞–ª–ª–æ–≤.", ephemeral=True)
        return

    if not db.supabase:
        await interaction.followup.send("‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.", ephemeral=True)
        return

    success = db.record_payment(user_id=user_id, fine_id=fine['id'], amount=to_pay, author_id=interaction.user.id)
    if not success:
        await interaction.followup.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–ø–ª–∞—Ç—ã.", ephemeral=True)
        return

    fine['paid_amount'] = round(fine.get('paid_amount', 0) + to_pay, 2)
    if fine['paid_amount'] >= fine['amount']:
        fine['is_paid'] = True

    await interaction.followup.send(f"‚úÖ –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ {to_pay} –±–∞–ª–ª–æ–≤ —à—Ç—Ä–∞—Ñ–∞ #{fine['id']}", ephemeral=True)


        # üìê –†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ –ø–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–º—É —à—Ç—Ä–∞—Ñ—É
def calculate_penalty(fine: dict) -> float:
    try:
        if not fine.get("is_overdue") or fine.get("is_paid"):
            return 0.0
    
        due_raw = fine.get("due_date")
        if not isinstance(due_raw, str):
            return 0.0
        due_date = datetime.fromisoformat(due_raw)
    
        now = datetime.now(timezone.utc)
        overdue_days = (now - due_date).days
        if overdue_days <= 0:
            return 0.0
    
        rate = 0.01 if fine["type"] == 1 else 0.05
        max_daily = 1.5
        base = fine["amount"] - fine.get("paid_amount", 0)
    
        total_penalty = 0.0
        for day in range(overdue_days):
            daily = min(base * rate, max_daily)
            total_penalty += daily
    
        return round(total_penalty, 2)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–µ–Ω–∏: {e}")
        return 0.0

# üí£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à—Ç—Ä–∞—Ñ–∞
def create_debt_from_fine(fine: dict) -> dict:
    try:
        base_due = fine['amount'] - fine.get('paid_amount', 0)
        penalty = calculate_penalty(fine)
        total_debt = round(base_due + penalty, 2)

        return {
            "user_id": fine['user_id'],
            "fine_id": fine['id'],
            "amount_due": base_due,
            "penalty": penalty,
            "total_due": total_debt,
            "created_at": datetime.now(timezone.utc).isoformat(),
            "last_attempt": None,
            "is_resolved": False
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
        return {}


    # ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤
async def check_overdue_fines(bot):
    await bot.wait_until_ready()
    now = datetime.now(timezone.utc)
    for fine in db.fines:
        if fine.get("is_paid") or fine.get("is_canceled") or fine.get("is_overdue"):
            continue
        due_raw = fine.get("due_date")
        if not isinstance(due_raw, str):
            continue
        try:
            due_date = datetime.fromisoformat(due_raw)
            if now > due_date:
                db.mark_overdue(fine)
        except Exception:
            continue
    
    # üîÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ —Å –¥–æ–ª–∂–Ω–∏–∫–æ–≤
async def debt_repayment_loop(bot):
    await bot.wait_until_ready()
    while True:
        now = datetime.now(timezone.utc)
        for fine in db.fines:
            if not fine.get("is_overdue") or fine.get("is_paid") or fine.get("is_canceled"):
                continue

            due_raw = fine.get("due_date")
            if not isinstance(due_raw, str):
                continue
            due_date = datetime.fromisoformat(due_raw)

            if (now - due_date).days < 10:
                continue

            debt = create_debt_from_fine(fine)
            user_id = debt["user_id"]
            available = db.scores.get(user_id, 0)

            if available > 0:
                to_deduct = min(available, debt["total_due"])
                db.update_scores(user_id, -to_deduct)
                db.add_action(user_id, -to_deduct, f"–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞ –ø–æ —à—Ç—Ä–∞—Ñ—É ID #{debt['fine_id']}", fine["author_id"])
                db.add_to_bank(to_deduct)

                fine['paid_amount'] = round(fine.get('paid_amount', 0) + to_deduct, 2)
                if fine['paid_amount'] >= fine['amount']:
                    fine['is_paid'] = True
                    print(f"‚úÖ –®—Ç—Ä–∞—Ñ #{fine['id']} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å")

                if not db.supabase:
                    print("‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–∞)")
                    continue

                assert db.supabase is not None

                db.supabase.table("fines").update({
                    "paid_amount": fine['paid_amount'],
                    "is_paid": fine['is_paid']
                }).eq("id", fine['id']).execute()


        await asyncio.sleep(86400)

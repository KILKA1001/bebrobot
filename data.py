import os
from datetime import datetime, timezone
from supabase import create_client, Client

class Database:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.init_db()
        return cls._instance

    def init_db(self):
        self.url = os.getenv("SUPABASE_URL")
        self.key = os.getenv("SUPABASE_KEY")
        self.supabase = create_client(self.url, self.key) if self.url and self.key else None
        self.scores = {}
        self.history = {}
        self.actions = []
        self.load_data()

    def load_data(self):
        print("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase...")
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ scores
            res = self.supabase.table("scores").select("*").execute()
            self.scores = {int(item['user_id']): float(item['points']) for item in res.data}

            # –ó–∞–≥—Ä—É–∑–∫–∞ actions –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ history
            res = self.supabase.table("actions").select("*").execute()
            self.actions = res.data
            self.history = {}

            for action in self.actions:
                user_id = int(action['user_id'])
                if user_id not in self.history:
                    self.history[user_id] = []
                self.history[user_id].append({
                    'points': float(action['points']),
                    'reason': action['reason'],
                    'author_id': int(action['author_id']),
                    'timestamp': action['timestamp']
                })

            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.scores)} scores, {len(self.actions)} actions")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            self.scores = {}
            self.actions = []
            self.history = {}

    def add_action(self, user_id: int, points: float, reason: str, author_id: int):
        action = {
            "user_id": user_id,
            "points": points,
            "reason": reason,
            "author_id": author_id,
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "action_type": "add"
        }

        # –õ–æ–∫–∞–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.actions.append(action)
        if user_id not in self.history:
            self.history[user_id] = []
        self.history[user_id].append(action)

        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        try:
            response = self.supabase.table("actions").insert(action).execute()
            print(f"üíæ –î–µ–π—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {action['points']} –±–∞–ª–ª–æ–≤ –¥–ª—è {user_id}")
        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")

    def save_all(self):
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ scores
            if self.scores:
                scores_data = [{"user_id": k, "points": v} for k, v in self.scores.items()]
                self.supabase.table("scores").upsert(scores_data).execute()

            print(f"üíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(self.scores)} scores")
        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
db = Database()

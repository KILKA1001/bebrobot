import os
from datetime import datetime, timezone
from supabase import create_client
from dotenv import load_dotenv
import traceback

class Database:
    _instance = None

    def __new__(cls):
        load_dotenv()
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.init_db()
        return cls._instance

    def init_db(self):
        self.url = os.getenv("SUPABASE_URL")
        self.key = os.getenv("SUPABASE_KEY")
        self.supabase = create_client(self.url, self.key) if self.url and self.key else None
        self.scores = {}
        self.history = {}
        self.actions = []
        self.load_data()

    def _handle_response(self, response):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ Supabase"""
        if isinstance(response, Exception):
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Supabase: {str(response)}")
            return None
        return response

    def load_data(self):
        print("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase...")
        try:
            if not self.supabase:
                raise ConnectionError("Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

            # –ó–∞–≥—Ä—É–∑–∫–∞ scores
            response = self._handle_response(
                self.supabase.table("scores").select("*").execute()
            )
            self.scores = {int(item['user_id']): float(item['points']) for item in response.data} if response else {}

            # –ó–∞–≥—Ä—É–∑–∫–∞ actions
            response = self._handle_response(
                self.supabase.table("actions").select("*").execute()
            )
            if response:
                self.actions = response.data
                self._build_history()
            else:
                self.actions = []
                self.history = {}

            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.scores)} scores, {len(self.actions)} actions")

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            traceback.print_exc()
            self.scores = {}
            self.actions = []
            self.history = {}

    def _build_history(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ actions"""
        self.history = {}
        for action in self.actions:
            user_id = int(action['user_id'])
            if user_id not in self.history:
                self.history[user_id] = []
            self.history[user_id].append({
                'points': float(action['points']),
                'reason': action['reason'],
                'author_id': int(action['author_id']),
                'timestamp': action['timestamp']
            })

    def add_action(self, user_id: int, points: float, reason: str, author_id: int):
        try:
            action = {
                "user_id": user_id,
                "points": points,
                "reason": reason,
                "author_id": author_id,
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "action_type": "remove" if points < 0 else "add"
            }

            # –õ–æ–∫–∞–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.actions.append(action)
            if user_id not in self.history:
                self.history[user_id] = []
            self.history[user_id].append(action)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            if self.supabase:
                response = self._handle_response(
                    self.supabase.table("actions").insert(action).execute()
                )
                if response:
                    print(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (ID: {response.data[0]['id'] if response.data else 'N/A'})")

        except Exception as e:
            print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ add_action(): {str(e)}")
            traceback.print_exc()

    def save_all(self):
        try:
            if self.scores and self.supabase:
                scores_data = [{"user_id": k, "points": v} for k, v in self.scores.items()]
                response = self._handle_response(
                    self.supabase.table("scores").upsert(scores_data).execute()
                )
                if response:
                    print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(response.data if response.data else [])} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            traceback.print_exc()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
db = Database()

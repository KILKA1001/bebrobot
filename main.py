# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã Discord
import discord
from discord.ext import commands

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import json
import os
from typing import Optional
import asyncio
from datetime import datetime, timezone
import pytz

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from data import scores, history, save_data, load_data
import data
from keep_alive import keep_alive
from dotenv import load_dotenv
from roles_and_activities import ACTIVITY_CATEGORIES, ROLE_THRESHOLDS
from history_manager import format_history_embed

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
COMMAND_PREFIX = '?'

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'scores.json'
HISTORY_FILE = 'history.json'

# –ò–Ω—Ç–µ–Ω—Ç—ã ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ message_content=True –¥–ª—è –∫–æ–º–∞–Ω–¥
intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix=COMMAND_PREFIX, intents=intents)


async def update_roles(member: discord.Member):
    user_id = member.id
    user_points = scores.get(user_id, 0)

    user_roles = [role.id for role in member.roles if role.id in ROLE_THRESHOLDS]

    role_to_add_id = None
    for role_id, threshold in sorted(ROLE_THRESHOLDS.items(), key=lambda x: x[1], reverse=True):
        if user_points >= threshold:
            role_to_add_id = role_id
            break

    if role_to_add_id and role_to_add_id not in user_roles:
        role_to_add = member.guild.get_role(role_to_add_id)
        if role_to_add:
            await member.add_roles(role_to_add)

    for role_id in user_roles:
        if role_id != role_to_add_id:
            role_to_remove = member.guild.get_role(role_id)
            if role_to_remove:
                await member.remove_roles(role_to_remove)


@bot.command(name='addpoints')
@commands.has_permissions(administrator=True)
async def add_points(ctx, member: discord.Member, points: str, *, reason: str = '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'):
    try:
        points_float = float(points.replace(',', '.'))
        user_id = member.id
        scores[user_id] = scores.get(user_id, 0) + points_float
        moscow_tz = pytz.timezone('Europe/Moscow')
        timestamp = datetime.now(moscow_tz).strftime("%H:%M %d-%m-%Y")
        if points_float < 0:
            scores[user_id] = 0
    except ValueError:
        await ctx.send("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    history.setdefault(user_id, []).append({
        'points': points_float,
        'reason': reason,
        'author_id': ctx.author.id,
        'timestamp': timestamp
    })

    save_data()
    await update_roles(member)

    embed = discord.Embed(
        title="üéâ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!",
        color=discord.Color.green()
    )
    embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", value=member.mention, inline=False)
    embed.add_field(name="‚ûï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", value=f"**{points}** –±–∞–ª–ª–æ–≤", inline=False)
    embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞:", value=reason, inline=False)
    embed.add_field(name="üïí –í—Ä–µ–º—è:", value=timestamp, inline=False)
    embed.add_field(name="üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:", value=f"{scores[user_id]} –±–∞–ª–ª–æ–≤", inline=False)

    await ctx.send(embed=embed)


@bot.command(name='removepoints')
@commands.has_permissions(administrator=True)
async def remove_points(ctx, member: discord.Member, points: str, *, reason: str = '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'):
    try:
        points_float = float(points.replace(',', '.'))
        
        if points_float < 0:
            await ctx.send("–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –∫–æ–º–∞–Ω–¥–µ removepoints.")
            return
            
        user_id = member.id
        current_points = scores.get(user_id, 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –º–æ–∂–Ω–æ —Ä–µ–∞–ª—å–Ω–æ —Å–Ω—è—Ç—å
        actual_points_to_remove = min(points_float, current_points)
        scores[user_id] = current_points - actual_points_to_remove
    except ValueError:
        await ctx.send("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    moscow_tz = pytz.timezone('Europe/Moscow')
    timestamp = datetime.now(moscow_tz).strftime("%H:%M %d-%m-%Y")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω—è—Ç—ã—Ö –±–∞–ª–ª–æ–≤
    history.setdefault(user_id, []).append({
        'points': -actual_points_to_remove,
        'reason': f"{reason} (–∑–∞–ø—Ä–æ—à–µ–Ω–æ —Å–Ω—è—Ç–∏–µ: {points_float} –±–∞–ª–ª–æ–≤)",
        'author_id': ctx.author.id,
        'timestamp': timestamp
    })

    save_data()
    await update_roles(member)

    embed = discord.Embed(
        title="‚ö†Ô∏è –ë–∞–ª–ª—ã —Å–Ω—è—Ç—ã!",
        color=discord.Color.red()
    )
    embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", value=member.mention, inline=False)
    embed.add_field(name="‚ûñ –°–Ω—è—Ç–æ –±–∞–ª–ª–æ–≤:", value=f"**{actual_points_to_remove}** –∏–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö {points_float}", inline=False)
    embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞:", value=reason, inline=False)
    embed.add_field(name="üïí –í—Ä–µ–º—è:", value=timestamp, inline=False)
    embed.add_field(name="üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:", value=f"{scores[user_id]} –±–∞–ª–ª–æ–≤", inline=False)

    await ctx.send(embed=embed)

    embed = discord.Embed(
        title="‚ö†Ô∏è –ë–∞–ª–ª—ã —Å–Ω—è—Ç—ã!",
        color=discord.Color.red()
    )
    embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", value=member.mention, inline=False)
    embed.add_field(name="‚ûñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", value=f"**{points}** –±–∞–ª–ª–æ–≤", inline=False)
    embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞:", value=reason, inline=False)
    embed.add_field(name="üïí –í—Ä–µ–º—è:", value=timestamp, inline=False)
    embed.add_field(name="üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:", value=f"{scores[user_id]} –±–∞–ª–ª–æ–≤", inline=False)

    await ctx.send(embed=embed)

@bot.command(name='points')
async def points(ctx, member: Optional[discord.Member] = None):
    if member is None:
        member = ctx.author
    if member is None:
        await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    user_id = member.id
    user_points = scores.get(user_id, 0)
    user_roles = [role for role in member.roles if role.id in ROLE_THRESHOLDS]
    role_names = ', '.join(role.name for role in user_roles) if user_roles else '–ù–µ—Ç —Ä–æ–ª–∏'

    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    place = None
    for i, (uid, points_val) in enumerate(sorted_scores, start=1):
        if uid == user_id:
            place = i
            break
    place_text = f"{place}" if place else "–ù–µ –≤ —Ç–æ–ø–µ"

    embed = discord.Embed(title=f"–ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.display_name}", color=discord.Color.blue())
    embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
    embed.add_field(name="–ë–∞–ª–ª—ã", value=f"{user_points}", inline=True)
    embed.add_field(name="–†–æ–ª–∏", value=role_names, inline=True)
    embed.add_field(name="–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ", value=place_text, inline=False)

    await ctx.send(embed=embed)


@bot.command(name='leaderboard')
async def leaderboard(ctx, top: int = 10):
    if not scores:
        await ctx.send("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–ª–∞—Ö.")
        return
    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:top]

    embed = discord.Embed(title=f"–¢–æ–ø {top} –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –±–∞–ª–ª–∞–º", color=discord.Color.gold())
    for i, (user_id, points_val) in enumerate(sorted_scores, start=1):
        member = ctx.guild.get_member(user_id)
        if member:
            user_roles = [role for role in member.roles if role.id in ROLE_THRESHOLDS]
            role_names = ', '.join(role.name for role in user_roles) if user_roles else '–ù–µ—Ç —Ä–æ–ª–∏'
            embed.add_field(name=f"{i}. {member.display_name}", value=f"–ë–∞–ª–ª—ã: {points_val}\n–†–æ–ª–∏: {role_names}", inline=False)
        else:
            embed.add_field(name=f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id}", value=f"–ë–∞–ª–ª—ã: {points_val}", inline=False)
    await ctx.send(embed=embed)

@bot.command(name='history')
async def history_cmd(ctx, member: Optional[discord.Member] = None, page: int = 1):
    if member is None:
        member = ctx.author
    if member is None:
        await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = member.id
    entries_per_page = 5

    if user_id not in history or not history[user_id]:
        await ctx.send(f"–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –¥–ª—è {member.display_name} –ø—É—Å—Ç–∞.")
        return

    total_entries = len(history[user_id])
    total_pages = (total_entries + entries_per_page - 1) // entries_per_page

    if page < 1 or page > total_pages:
        await ctx.send(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–≥–æ {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü.")
        return

    start = (page - 1) * entries_per_page
    end = start + entries_per_page
    page_history = history[user_id][start:end]

    embed = format_history_embed(page_history, member.display_name, page, total_entries)
    await ctx.send(embed=embed)

@bot.command(name='roles')
async def roles_list(ctx):
    desc = ""
    for role_id, points_needed in sorted(ROLE_THRESHOLDS.items(), key=lambda x: x[1], reverse=True):
        role = ctx.guild.get_role(role_id)
        if role:
            desc += f"**{role.name}**: {points_needed} –±–∞–ª–ª–æ–≤\n"
    embed = discord.Embed(title="–†–æ–ª–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–ª–ª–æ–≤", description=desc, color=discord.Color.purple())
    await ctx.send(embed=embed)


@bot.command(name='helpy')
async def helpy_cmd(ctx):
    help_text = f"""
**–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:**

`{COMMAND_PREFIX}addpoints @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <–±–∞–ª–ª—ã> [–ø—Ä–∏—á–∏–Ω–∞]` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)  
`{COMMAND_PREFIX}removepoints @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <–±–∞–ª–ª—ã> [–ø—Ä–∏—á–∏–Ω–∞]` ‚Äî —Å–Ω—è—Ç—å –±–∞–ª–ª—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)  
`{COMMAND_PREFIX}undo @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>` ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) 
`{COMMAND_PREFIX}points [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ—Ä–∞)  
`{COMMAND_PREFIX}leaderboard [–∫–æ–ª-–≤–æ]` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ª–∏–¥–µ—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)  
`{COMMAND_PREFIX}history [@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [—Å—Ç—Ä–∞–Ω–∏—Ü–∞]` ‚Äî –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤  
`{COMMAND_PREFIX}roles` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–æ–ª–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å  
`{COMMAND_PREFIX}activities` ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –±–∞–ª–ª–∞—Ö  
`{COMMAND_PREFIX}helpy` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  
"""
    await ctx.send(help_text)


@bot.command()
async def ping(ctx):
    await ctx.send('pong')


async def send_greetings(channel, user_list):
    for user_id in user_list:
        await channel.send(f"–ü—Ä–∏–≤–µ—Ç, <@{user_id}>!")
        await asyncio.sleep(1)


    @bot.event
    async def on_ready():
        load_data()  # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ (data.py)
        print(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω! –ö–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(bot.commands)}')
        for cmd in bot.commands:
            print(f"- {cmd.name}")
        bot.loop.create_task(autosave_task())


async def autosave_task():
    await bot.wait_until_ready()
    while not bot.is_closed():
        save_data()
        print("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        await asyncio.sleep(300)


@bot.command(name='undo')
@commands.has_permissions(administrator=True)
async def undo(ctx, member: discord.Member, count: int = 1):
        user_id = member.id
        user_history = history.get(user_id, [])

        if len(user_history) < count:
            await ctx.send(
                f"‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å **{count}** –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {member.display_name}, "
                f"—Ç–∞–∫ –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ **{len(user_history)}** –∑–∞–ø–∏—Å–µ–π."
            )
            return

        undo_entries = []
        for _ in range(count):
            entry = user_history.pop()
            points_val = entry.get("points", 0)
            reason = entry.get("reason", "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã")
            scores[user_id] = scores.get(user_id, 0) - points_val
            if scores[user_id] < 0:
                scores[user_id] = 0
            undo_entries.append((points_val, reason))

        if not user_history:
            del history[user_id]

        save_data()
        await update_roles(member)

        embed = discord.Embed(
            title=f"‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ {count} –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {member.display_name}",
            color=discord.Color.orange()
        )
        for i, (points_val, reason) in enumerate(undo_entries[::-1], start=1):
            sign = "+" if points_val > 0 else ""
            embed.add_field(
                name=f"{i}. {sign}{points_val} –±–∞–ª–ª–æ–≤",
                value=reason,
                inline=False
            )
        await ctx.send(embed=embed)
        await log_action_cancellation(ctx, member, undo_entries)


async def log_action_cancellation(ctx, member: discord.Member, entries: list):
    channel = discord.utils.get(ctx.guild.channels, name='history-log')
    if not channel:
        return

    now = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
    lines = [f"**{ctx.author.display_name}** –æ—Ç–º–µ–Ω–∏–ª(–∞) {len(entries)} –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è **{member.display_name}** ({member.id}) –≤ {now}:"]
    for i, (points, reason) in enumerate(entries[::-1], start=1):
        sign = "+" if points > 0 else ""
        lines.append(f"{i}. {sign}{points} ‚Äî {reason}")

    await channel.send("\n".join(lines))

print(bot.all_commands.keys())

print(dir(data))
print(data.scores)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}!')

keep_alive()  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ

print("TOKEN:", os.getenv("TOKEN"))

TOKEN = os.getenv('DISCORD_TOKEN')

@bot.command(name='activities')
async def activities_cmd(ctx):
    embed = discord.Embed(
        title="üìã –í–∏–¥—ã –ø–æ–º–æ—â–∏ –∫–ª—É–±—É",
        description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –±–∞–ª–ª–∞—Ö:",
        color=discord.Color.blue()
    )

    for category_name, activities in ACTIVITY_CATEGORIES.items():
        category_text = ""
        for activity_name, info in activities.items():
            category_text += f"**{activity_name}** ({info['points']} –±–∞–ª–ª–æ–≤)\n"
            category_text += f"‚Ü≥ {info['description']}\n"
            if 'conditions' in info:
                category_text += "–£—Å–ª–æ–≤–∏—è:\n"
                for condition in info['conditions']:
                    category_text += f"‚Ä¢ {condition}\n"
            category_text += "\n"

        embed.add_field(
            name=category_name,
            value=category_text,
            inline=False
        )

    await ctx.send(embed=embed)

bot.run(os.getenv("TOKEN"))
